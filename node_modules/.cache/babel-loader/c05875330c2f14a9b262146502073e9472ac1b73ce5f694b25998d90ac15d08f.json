{"ast":null,"code":"/**\n * Converts a segment number (0-59) to its corresponding clock hour (1-12)\n * @param {number} segment - The segment number (0-59)\n * @returns {number} The clock hour (1-12)\n */\nexport const getClockHour = segment => {\n  // Special case handling for segments around hour 12\n  if (segment >= 57 || segment <= 2) return 12;\n\n  // Special case for hour 6\n  if (segment >= 28 && segment <= 32) return 6;\n\n  // Handle hour boundary cases\n  if (segment % 5 <= 2) {\n    return Math.floor(segment / 5);\n  }\n\n  // For all other segments, calculate the hour\n  const hourNumber = Math.floor(segment / 5) + 1;\n\n  // Ensure the hour is within valid bounds\n  return Math.min(Math.max(hourNumber, 1), 11);\n};\n\n// Run tests only if this file is executed directly\n// if (import.meta.url === import.meta.resolve('./getClockHour.js')) {\n//     const runClockHourTests = () => {\n//         const testCases = [\n//             // Special cases around hour 12\n//             { segment: 57, expected: 12, name: \"Hour 12 - start\" },\n//             { segment: 59, expected: 12, name: \"Hour 12 - middle\" },\n//             { segment: 0, expected: 12, name: \"Hour 12 - midnight\" },\n//             { segment: 2, expected: 12, name: \"Hour 12 - end\" },\n\n//             // Special cases around hour 6\n//             { segment: 28, expected: 6, name: \"Hour 6 - start\" },\n//             { segment: 30, expected: 6, name: \"Hour 6 - middle\" },\n//             { segment: 32, expected: 6, name: \"Hour 6 - end\" },\n\n//             // Regular hours\n//             { segment: 5, expected: 1, name: \"Hour 1\" },\n//             { segment: 10, expected: 2, name: \"Hour 2\" },\n//             { segment: 15, expected: 3, name: \"Hour 3\" },\n//             { segment: 20, expected: 4, name: \"Hour 4\" },\n//             { segment: 25, expected: 5, name: \"Hour 5\" },\n//             { segment: 35, expected: 7, name: \"Hour 7\" },\n//             { segment: 40, expected: 8, name: \"Hour 8\" },\n//             { segment: 45, expected: 9, name: \"Hour 9\" },\n//             { segment: 50, expected: 10, name: \"Hour 10\" },\n//             { segment: 55, expected: 11, name: \"Hour 11\" },\n\n//             // Boundary cases\n//             { segment: 3, expected: 1, name: \"Boundary - after 12\" },\n//             { segment: 56, expected: 11, name: \"Boundary - before 12\" }\n//         ];\n\n//         // Run tests and collect results\n//         const results = testCases.map(testCase => {\n//             const result = getClockHour(testCase.segment);\n//             const passed = result === testCase.expected;\n\n//             return {\n//                 name: testCase.name,\n//                 segment: testCase.segment,\n//                 expected: testCase.expected,\n//                 actual: result,\n//                 passed: passed\n//             };\n//         });\n\n//         // Print results\n//         results.forEach(result => {\n//             console.log(`\\nTest: ${result.name}`);\n//             console.log(`Segment: ${result.segment}`);\n//             console.log(`Expected: ${result.expected}`);\n//             console.log(`Actual: ${result.actual}`);\n//             console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n//         });\n\n//         // Return overall test status\n//         return results.every(r => r.passed);\n//     };\n\n//     // Run the tests\n//     const testsPassed = runClockHourTests();\n//     console.log(`\\nAll tests ${testsPassed ? 'PASSED' : 'FAILED'}`);\n// }","map":{"version":3,"names":["getClockHour","segment","Math","floor","hourNumber","min","max"],"sources":["/Users/rose/Code/RCRD/src/components/clock/utils/getClockHour.js"],"sourcesContent":["/**\n * Converts a segment number (0-59) to its corresponding clock hour (1-12)\n * @param {number} segment - The segment number (0-59)\n * @returns {number} The clock hour (1-12)\n */\nexport const getClockHour = (segment) => {\n    // Special case handling for segments around hour 12\n    if (segment >= 57 || segment <= 2) return 12;\n    \n    // Special case for hour 6\n    if (segment >= 28 && segment <= 32) return 6;\n    \n    // Handle hour boundary cases\n    if (segment % 5 <= 2) {\n        return Math.floor(segment / 5);\n    }\n    \n    // For all other segments, calculate the hour\n    const hourNumber = Math.floor(segment / 5) + 1;\n    \n    // Ensure the hour is within valid bounds\n    return Math.min(Math.max(hourNumber, 1), 11);\n};\n\n// Run tests only if this file is executed directly\n// if (import.meta.url === import.meta.resolve('./getClockHour.js')) {\n//     const runClockHourTests = () => {\n//         const testCases = [\n//             // Special cases around hour 12\n//             { segment: 57, expected: 12, name: \"Hour 12 - start\" },\n//             { segment: 59, expected: 12, name: \"Hour 12 - middle\" },\n//             { segment: 0, expected: 12, name: \"Hour 12 - midnight\" },\n//             { segment: 2, expected: 12, name: \"Hour 12 - end\" },\n            \n//             // Special cases around hour 6\n//             { segment: 28, expected: 6, name: \"Hour 6 - start\" },\n//             { segment: 30, expected: 6, name: \"Hour 6 - middle\" },\n//             { segment: 32, expected: 6, name: \"Hour 6 - end\" },\n            \n//             // Regular hours\n//             { segment: 5, expected: 1, name: \"Hour 1\" },\n//             { segment: 10, expected: 2, name: \"Hour 2\" },\n//             { segment: 15, expected: 3, name: \"Hour 3\" },\n//             { segment: 20, expected: 4, name: \"Hour 4\" },\n//             { segment: 25, expected: 5, name: \"Hour 5\" },\n//             { segment: 35, expected: 7, name: \"Hour 7\" },\n//             { segment: 40, expected: 8, name: \"Hour 8\" },\n//             { segment: 45, expected: 9, name: \"Hour 9\" },\n//             { segment: 50, expected: 10, name: \"Hour 10\" },\n//             { segment: 55, expected: 11, name: \"Hour 11\" },\n            \n//             // Boundary cases\n//             { segment: 3, expected: 1, name: \"Boundary - after 12\" },\n//             { segment: 56, expected: 11, name: \"Boundary - before 12\" }\n//         ];\n\n//         // Run tests and collect results\n//         const results = testCases.map(testCase => {\n//             const result = getClockHour(testCase.segment);\n//             const passed = result === testCase.expected;\n\n//             return {\n//                 name: testCase.name,\n//                 segment: testCase.segment,\n//                 expected: testCase.expected,\n//                 actual: result,\n//                 passed: passed\n//             };\n//         });\n\n//         // Print results\n//         results.forEach(result => {\n//             console.log(`\\nTest: ${result.name}`);\n//             console.log(`Segment: ${result.segment}`);\n//             console.log(`Expected: ${result.expected}`);\n//             console.log(`Actual: ${result.actual}`);\n//             console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n//         });\n\n//         // Return overall test status\n//         return results.every(r => r.passed);\n//     };\n\n//     // Run the tests\n//     const testsPassed = runClockHourTests();\n//     console.log(`\\nAll tests ${testsPassed ? 'PASSED' : 'FAILED'}`);\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAIC,OAAO,IAAK;EACrC;EACA,IAAIA,OAAO,IAAI,EAAE,IAAIA,OAAO,IAAI,CAAC,EAAE,OAAO,EAAE;;EAE5C;EACA,IAAIA,OAAO,IAAI,EAAE,IAAIA,OAAO,IAAI,EAAE,EAAE,OAAO,CAAC;;EAE5C;EACA,IAAIA,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE;IAClB,OAAOC,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,CAAC,CAAC;EAClC;;EAEA;EACA,MAAMG,UAAU,GAAGF,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC;;EAE9C;EACA,OAAOC,IAAI,CAACG,GAAG,CAACH,IAAI,CAACI,GAAG,CAACF,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}