{"ast":null,"code":"// clockMapping.js\n\n// Create a mapping table where the index is the segment number and the value is the clock hour\nexport const segmentToClockHourMap = Array(60).fill(0).map((_, segment) => {\n  if ([0, 1, 2, 3, 56, 57, 58, 59].includes(segment)) return 12;\n  if ([4, 5, 6, 7, 8].includes(segment)) return 1;\n  if ([9, 10, 11, 12, 13].includes(segment)) return 2;\n  if ([14, 15, 16, 17, 18].includes(segment)) return 3;\n  if ([19, 20, 21, 22, 23].includes(segment)) return 4;\n  if ([24, 25, 26].includes(segment)) return 5;\n  if ([27, 28, 29, 30, 31, 32].includes(segment)) return 6;\n  if ([33, 34, 35].includes(segment)) return 7;\n  if ([36, 37, 38, 39, 40].includes(segment)) return 8;\n  if ([41, 42, 43, 44, 45].includes(segment)) return 9;\n  if ([46, 47, 48, 49, 50].includes(segment)) return 10;\n  if ([51, 52, 53, 54, 55].includes(segment)) return 11;\n  return 0; // Should never happen with 0-59 segments\n});\n\n// Utility function to convert a segment to its clock hour\nexport const segmentToClockHour = segment => {\n  return segmentToClockHourMap[segment];\n};\n\n// For debugging: Create a reverse mapping showing which segments correspond to each hour\nexport const clockHourToSegmentsMap = new Map([[12, [0, 1, 2, 3, 56, 57, 58, 59]], [1, [4, 5, 6, 7, 8]], [2, [9, 10, 11, 12, 13]], [3, [14, 15, 16, 17, 18]], [4, [19, 20, 21, 22, 23]], [5, [24, 25, 26]], [6, [27, 28, 29, 30, 31, 32]], [7, [33, 34, 35]], [8, [36, 37, 38, 39, 40]], [9, [41, 42, 43, 44, 45]], [10, [46, 47, 48, 49, 50]], [11, [51, 52, 53, 54, 55]]]);\n\n// Utility function to get all segments for a given clock hour\nexport const getSegmentsForClockHour = hour => {\n  return clockHourToSegmentsMap.get(hour) || [];\n};","map":{"version":3,"names":["segmentToClockHourMap","Array","fill","map","_","segment","includes","segmentToClockHour","clockHourToSegmentsMap","Map","getSegmentsForClockHour","hour","get"],"sources":["/Users/rose/Code/RD_risk/retinal-calculator/src/components/clock/utils/clockMapping.js"],"sourcesContent":["// clockMapping.js\n\n// Create a mapping table where the index is the segment number and the value is the clock hour\nexport const segmentToClockHourMap = Array(60).fill(0).map((_, segment) => {\n    if ([0,1,2,3,56,57,58,59].includes(segment)) return 12;\n    if ([4,5,6,7,8].includes(segment)) return 1;\n    if ([9,10,11,12,13].includes(segment)) return 2;\n    if ([14,15,16,17,18].includes(segment)) return 3;\n    if ([19,20,21,22,23].includes(segment)) return 4;\n    if ([24,25,26].includes(segment)) return 5;\n    if ([27,28,29,30,31,32].includes(segment)) return 6;\n    if ([33,34,35].includes(segment)) return 7;\n    if ([36,37,38,39,40].includes(segment)) return 8;\n    if ([41,42,43,44,45].includes(segment)) return 9;\n    if ([46,47,48,49,50].includes(segment)) return 10;\n    if ([51,52,53,54,55].includes(segment)) return 11;\n    return 0; // Should never happen with 0-59 segments\n  });\n  \n  // Utility function to convert a segment to its clock hour\n  export const segmentToClockHour = (segment) => {\n    return segmentToClockHourMap[segment];\n  };\n  \n  // For debugging: Create a reverse mapping showing which segments correspond to each hour\n  export const clockHourToSegmentsMap = new Map([\n    [12, [0,1,2,3,56,57,58,59]],\n    [1, [4,5,6,7,8]],\n    [2, [9,10,11,12,13]],\n    [3, [14,15,16,17,18]],\n    [4, [19,20,21,22,23]],\n    [5, [24,25,26]],\n    [6, [27,28,29,30,31,32]],\n    [7, [33,34,35]],\n    [8, [36,37,38,39,40]],\n    [9, [41,42,43,44,45]],\n    [10, [46,47,48,49,50]],\n    [11, [51,52,53,54,55]]\n  ]);\n  \n  // Utility function to get all segments for a given clock hour\n  export const getSegmentsForClockHour = (hour) => {\n    return clockHourToSegmentsMap.get(hour) || [];\n  };"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,qBAAqB,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,OAAO,KAAK;EACvE,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,EAAE;EACtD,IAAI,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,CAAC;EAC3C,IAAI,CAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,CAAC;EAC/C,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,CAAC;EAChD,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,CAAC;EAChD,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,CAAC;EAC1C,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,CAAC;EACnD,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,CAAC;EAC1C,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,CAAC;EAChD,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,CAAC;EAChD,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,EAAE;EACjD,IAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAACC,QAAQ,CAACD,OAAO,CAAC,EAAE,OAAO,EAAE;EACjD,OAAO,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAME,kBAAkB,GAAIF,OAAO,IAAK;EAC7C,OAAOL,qBAAqB,CAACK,OAAO,CAAC;AACvC,CAAC;;AAED;AACA,OAAO,MAAMG,sBAAsB,GAAG,IAAIC,GAAG,CAAC,CAC5C,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EAC3B,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAChB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EACpB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EACrB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EACrB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EACf,CAAC,CAAC,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EACf,CAAC,CAAC,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EACrB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EACrB,CAAC,EAAE,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EACtB,CAAC,EAAE,EAAE,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,CACvB,CAAC;;AAEF;AACA,OAAO,MAAMC,uBAAuB,GAAIC,IAAI,IAAK;EAC/C,OAAOH,sBAAsB,CAACI,GAAG,CAACD,IAAI,CAAC,IAAI,EAAE;AAC/C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}