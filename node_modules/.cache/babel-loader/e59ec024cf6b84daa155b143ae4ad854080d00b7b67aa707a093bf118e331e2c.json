{"ast":null,"code":"/**\n * Maps segment numbers (0-59) to clock hours (1-12)\n * @type {number[]}\n */\nexport const segmentToClockHourMap = Array(60).fill(0).map((_, segment) => {\n  if ([0, 1, 2, 3, 56, 57, 58, 59].includes(segment)) return 12;\n  if ([4, 5, 6, 7, 8].includes(segment)) return 1;\n  if ([9, 10, 11, 12, 13].includes(segment)) return 2;\n  if ([14, 15, 16, 17, 18].includes(segment)) return 3;\n  if ([19, 20, 21, 22, 23].includes(segment)) return 4;\n  if ([24, 25, 26].includes(segment)) return 5;\n  if ([27, 28, 29, 30, 31, 32].includes(segment)) return 6;\n  if ([33, 34, 35].includes(segment)) return 7;\n  if ([36, 37, 38, 39, 40].includes(segment)) return 8;\n  if ([41, 42, 43, 44, 45].includes(segment)) return 9;\n  if ([46, 47, 48, 49, 50].includes(segment)) return 10;\n  if ([51, 52, 53, 54, 55].includes(segment)) return 11;\n  return 0; // Should never happen with 0-59 segments\n});\n\n/**\n* Converts a segment number to its corresponding clock hour\n* @param {number} segment - The segment number (0-59)\n* @returns {number} The clock hour (1-12)\n*/\nexport const segmentToClockHour = segment => {\n  return segmentToClockHourMap[segment];\n};\n\n/**\n* Maps clock hours to their corresponding segments\n* @type {Map<number, number[]>}\n*/\nexport const clockHourToSegmentsMap = new Map([[12, [0, 1, 2, 3, 56, 57, 58, 59]], [1, [4, 5, 6, 7, 8]], [2, [9, 10, 11, 12, 13]], [3, [14, 15, 16, 17, 18]], [4, [19, 20, 21, 22, 23]], [5, [24, 25, 26]], [6, [27, 28, 29, 30, 31, 32]], [7, [33, 34, 35]], [8, [36, 37, 38, 39, 40]], [9, [41, 42, 43, 44, 45]], [10, [46, 47, 48, 49, 50]], [11, [51, 52, 53, 54, 55]]]);\n\n/**\n* Gets all segments corresponding to a given clock hour\n* @param {number} hour - The clock hour (1-12)\n* @returns {number[]} Array of segment numbers for that hour\n*/\nexport const getSegmentsForClockHour = hour => {\n  return clockHourToSegmentsMap.get(hour) || [];\n};\n\n// Run tests only if this file is executed directly\nif (import.meta.url === import.meta.resolve('./clockMapping.js')) {\n  const runClockMappingTests = () => {\n    const testCases = [\n    // Test segmentToClockHour\n    {\n      name: \"Segment to hour mapping - hour 12\",\n      fn: () => {\n        const segments = [0, 1, 2, 3, 56, 57, 58, 59];\n        return segments.every(seg => segmentToClockHour(seg) === 12);\n      }\n    }, {\n      name: \"Segment to hour mapping - regular hours\",\n      fn: () => {\n        const cases = [{\n          seg: 5,\n          hour: 1\n        }, {\n          seg: 10,\n          hour: 2\n        }, {\n          seg: 15,\n          hour: 3\n        }, {\n          seg: 30,\n          hour: 6\n        }, {\n          seg: 45,\n          hour: 9\n        }];\n        return cases.every(({\n          seg,\n          hour\n        }) => segmentToClockHour(seg) === hour);\n      }\n    },\n    // Test getSegmentsForClockHour\n    {\n      name: \"Hour to segments mapping - hour 12\",\n      fn: () => {\n        const segments = getSegmentsForClockHour(12);\n        const expected = [0, 1, 2, 3, 56, 57, 58, 59];\n        return JSON.stringify(segments) === JSON.stringify(expected);\n      }\n    }, {\n      name: \"Hour to segments mapping - hour 6\",\n      fn: () => {\n        const segments = getSegmentsForClockHour(6);\n        const expected = [27, 28, 29, 30, 31, 32];\n        return JSON.stringify(segments) === JSON.stringify(expected);\n      }\n    }, {\n      name: \"Invalid hour returns empty array\",\n      fn: () => {\n        const segments = getSegmentsForClockHour(13);\n        return segments.length === 0;\n      }\n    },\n    // Test consistency between maps\n    {\n      name: \"Bidirectional mapping consistency\",\n      fn: () => {\n        return Array.from(clockHourToSegmentsMap.entries()).every(([hour, segments]) => {\n          return segments.every(segment => segmentToClockHour(segment) === hour);\n        });\n      }\n    }];\n\n    // Run tests and collect results\n    const results = testCases.map(testCase => {\n      const passed = testCase.fn();\n      return {\n        name: testCase.name,\n        passed: passed\n      };\n    });\n\n    // Print results\n    results.forEach(result => {\n      console.log(`\\nTest: ${result.name}`);\n      console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n    });\n\n    // Return overall test status\n    return results.every(r => r.passed);\n  };\n\n  // Run the tests\n  const testsPassed = runClockMappingTests();\n  console.log(`\\nAll tests ${testsPassed ? 'PASSED' : 'FAILED'}`);\n}","map":{"version":3,"names":["segmentToClockHourMap","Array","fill","map","_","segment","includes","segmentToClockHour","clockHourToSegmentsMap","Map","getSegmentsForClockHour","hour","get","import","meta","url","resolve","runClockMappingTests","testCases","name","fn","segments","every","seg","cases","expected","JSON","stringify","length","from","entries","results","testCase","passed","forEach","result","console","log","r","testsPassed"],"sources":["/Users/rose/Code/RCRD/src/components/clock/utils/clockMapping.js"],"sourcesContent":["/**\n * Maps segment numbers (0-59) to clock hours (1-12)\n * @type {number[]}\n */\nexport const segmentToClockHourMap = Array(60).fill(0).map((_, segment) => {\n  if ([0,1,2,3,56,57,58,59].includes(segment)) return 12;\n  if ([4,5,6,7,8].includes(segment)) return 1;\n  if ([9,10,11,12,13].includes(segment)) return 2;\n  if ([14,15,16,17,18].includes(segment)) return 3;\n  if ([19,20,21,22,23].includes(segment)) return 4;\n  if ([24,25,26].includes(segment)) return 5;\n  if ([27,28,29,30,31,32].includes(segment)) return 6;\n  if ([33,34,35].includes(segment)) return 7;\n  if ([36,37,38,39,40].includes(segment)) return 8;\n  if ([41,42,43,44,45].includes(segment)) return 9;\n  if ([46,47,48,49,50].includes(segment)) return 10;\n  if ([51,52,53,54,55].includes(segment)) return 11;\n  return 0; // Should never happen with 0-59 segments\n});\n\n/**\n* Converts a segment number to its corresponding clock hour\n* @param {number} segment - The segment number (0-59)\n* @returns {number} The clock hour (1-12)\n*/\nexport const segmentToClockHour = (segment) => {\n  return segmentToClockHourMap[segment];\n};\n\n/**\n* Maps clock hours to their corresponding segments\n* @type {Map<number, number[]>}\n*/\nexport const clockHourToSegmentsMap = new Map([\n  [12, [0,1,2,3,56,57,58,59]],\n  [1, [4,5,6,7,8]],\n  [2, [9,10,11,12,13]],\n  [3, [14,15,16,17,18]],\n  [4, [19,20,21,22,23]],\n  [5, [24,25,26]],\n  [6, [27,28,29,30,31,32]],\n  [7, [33,34,35]],\n  [8, [36,37,38,39,40]],\n  [9, [41,42,43,44,45]],\n  [10, [46,47,48,49,50]],\n  [11, [51,52,53,54,55]]\n]);\n\n/**\n* Gets all segments corresponding to a given clock hour\n* @param {number} hour - The clock hour (1-12)\n* @returns {number[]} Array of segment numbers for that hour\n*/\nexport const getSegmentsForClockHour = (hour) => {\n  return clockHourToSegmentsMap.get(hour) || [];\n};\n\n// Run tests only if this file is executed directly\nif (import.meta.url === import.meta.resolve('./clockMapping.js')) {\n  const runClockMappingTests = () => {\n      const testCases = [\n          // Test segmentToClockHour\n          {\n              name: \"Segment to hour mapping - hour 12\",\n              fn: () => {\n                  const segments = [0, 1, 2, 3, 56, 57, 58, 59];\n                  return segments.every(seg => segmentToClockHour(seg) === 12);\n              }\n          },\n          {\n              name: \"Segment to hour mapping - regular hours\",\n              fn: () => {\n                  const cases = [\n                      { seg: 5, hour: 1 },\n                      { seg: 10, hour: 2 },\n                      { seg: 15, hour: 3 },\n                      { seg: 30, hour: 6 },\n                      { seg: 45, hour: 9 }\n                  ];\n                  return cases.every(({ seg, hour }) => segmentToClockHour(seg) === hour);\n              }\n          },\n          // Test getSegmentsForClockHour\n          {\n              name: \"Hour to segments mapping - hour 12\",\n              fn: () => {\n                  const segments = getSegmentsForClockHour(12);\n                  const expected = [0, 1, 2, 3, 56, 57, 58, 59];\n                  return JSON.stringify(segments) === JSON.stringify(expected);\n              }\n          },\n          {\n              name: \"Hour to segments mapping - hour 6\",\n              fn: () => {\n                  const segments = getSegmentsForClockHour(6);\n                  const expected = [27, 28, 29, 30, 31, 32];\n                  return JSON.stringify(segments) === JSON.stringify(expected);\n              }\n          },\n          {\n              name: \"Invalid hour returns empty array\",\n              fn: () => {\n                  const segments = getSegmentsForClockHour(13);\n                  return segments.length === 0;\n              }\n          },\n          // Test consistency between maps\n          {\n              name: \"Bidirectional mapping consistency\",\n              fn: () => {\n                  return Array.from(clockHourToSegmentsMap.entries()).every(([hour, segments]) => {\n                      return segments.every(segment => segmentToClockHour(segment) === hour);\n                  });\n              }\n          }\n      ];\n\n      // Run tests and collect results\n      const results = testCases.map(testCase => {\n          const passed = testCase.fn();\n          return {\n              name: testCase.name,\n              passed: passed\n          };\n      });\n\n      // Print results\n      results.forEach(result => {\n          console.log(`\\nTest: ${result.name}`);\n          console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n      });\n\n      // Return overall test status\n      return results.every(r => r.passed);\n  };\n\n  // Run the tests\n  const testsPassed = runClockMappingTests();\n  console.log(`\\nAll tests ${testsPassed ? 'PASSED' : 'FAILED'}`);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}