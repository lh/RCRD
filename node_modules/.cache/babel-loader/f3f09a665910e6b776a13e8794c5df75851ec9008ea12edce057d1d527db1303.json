{"ast":null,"code":"import CoordinateSystem from './clockCoordinates';\nexport const segmentToHour = segment => Math.floor(segment / 5) + 1;\nexport const getPosition = (hour, radius) => {\n  // Convert hour (1-12) to degrees clockwise from 12\n  const clockAngle = hour * 30 % 360; // Each hour is 30 degrees\n  const point = CoordinateSystem.getPointFromClockAngle(clockAngle, radius);\n  const tearAngle = clockAngle; // For now, just use the clock angle\n\n  return {\n    ...point,\n    angle: tearAngle,\n    debug: {\n      hour,\n      clockAngle,\n      tearAngle\n    }\n  };\n};\nexport const getSegmentPosition = (segment, radius) => {\n  return CoordinateSystem.getPointFromSegment(segment, radius);\n};\nexport const createTearPath = (x, y, angle, debug) => {\n  const tearPath = `\n    M -4 -8\n    c -0.091 -0.936 0.333 -1.232 0.777 0.658\n    c 0.389 1.655 1.060 3.281 1.060 3.281\n    s 0 0.254 1.022 0.617\n    c 0.793 0.282 2.183 -2.882 2.183 -2.882\n    s 1.953 -4.433 1.437 -1.294\n    c -1.217 7.410 -1.640 6.716 -1.664 6.897\n    c -0.024 0.181 -0.510 0.596 -0.510 0.596\n    s -0.178 0.183 -0.585 0.327\n    c -3.121 1.110 -3.163 -3.001 -3.163 -3.001\n    L -4 -8\n  `;\n  return {\n    d: tearPath,\n    transform: `translate(${x}, ${y}) scale(1.5) rotate(${angle})`\n  };\n};","map":{"version":3,"names":["CoordinateSystem","segmentToHour","segment","Math","floor","getPosition","hour","radius","clockAngle","point","getPointFromClockAngle","tearAngle","angle","debug","getSegmentPosition","getPointFromSegment","createTearPath","x","y","tearPath","d","transform"],"sources":["/Users/rose/Code/RD_risk/retinal-calculator/src/components/clock/utils/clockCalculations.js"],"sourcesContent":["import CoordinateSystem from './clockCoordinates';\n\nexport const segmentToHour = (segment) => Math.floor(segment / 5) + 1;\n\nexport const getPosition = (hour, radius) => {\n  // Convert hour (1-12) to degrees clockwise from 12\n  const clockAngle = (hour * 30) % 360;  // Each hour is 30 degrees\n  const point = CoordinateSystem.getPointFromClockAngle(clockAngle, radius);\n  \n  const tearAngle = clockAngle;  // For now, just use the clock angle\n  \n  return {\n    ...point,\n    angle: tearAngle,\n    debug: {\n      hour,\n      clockAngle,\n      tearAngle\n    }\n  };\n};\n\nexport const getSegmentPosition = (segment, radius) => {\n  return CoordinateSystem.getPointFromSegment(segment, radius);\n};\n\nexport const createTearPath = (x, y, angle, debug) => {\n  const tearPath = `\n    M -4 -8\n    c -0.091 -0.936 0.333 -1.232 0.777 0.658\n    c 0.389 1.655 1.060 3.281 1.060 3.281\n    s 0 0.254 1.022 0.617\n    c 0.793 0.282 2.183 -2.882 2.183 -2.882\n    s 1.953 -4.433 1.437 -1.294\n    c -1.217 7.410 -1.640 6.716 -1.664 6.897\n    c -0.024 0.181 -0.510 0.596 -0.510 0.596\n    s -0.178 0.183 -0.585 0.327\n    c -3.121 1.110 -3.163 -3.001 -3.163 -3.001\n    L -4 -8\n  `;\n  return {\n    d: tearPath,\n    transform: `translate(${x}, ${y}) scale(1.5) rotate(${angle})`\n  };\n};\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,oBAAoB;AAEjD,OAAO,MAAMC,aAAa,GAAIC,OAAO,IAAKC,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC;AAErE,OAAO,MAAMG,WAAW,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EAC3C;EACA,MAAMC,UAAU,GAAIF,IAAI,GAAG,EAAE,GAAI,GAAG,CAAC,CAAE;EACvC,MAAMG,KAAK,GAAGT,gBAAgB,CAACU,sBAAsB,CAACF,UAAU,EAAED,MAAM,CAAC;EAEzE,MAAMI,SAAS,GAAGH,UAAU,CAAC,CAAE;;EAE/B,OAAO;IACL,GAAGC,KAAK;IACRG,KAAK,EAAED,SAAS;IAChBE,KAAK,EAAE;MACLP,IAAI;MACJE,UAAU;MACVG;IACF;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,kBAAkB,GAAGA,CAACZ,OAAO,EAAEK,MAAM,KAAK;EACrD,OAAOP,gBAAgB,CAACe,mBAAmB,CAACb,OAAO,EAAEK,MAAM,CAAC;AAC9D,CAAC;AAED,OAAO,MAAMS,cAAc,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEN,KAAK,EAAEC,KAAK,KAAK;EACpD,MAAMM,QAAQ,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EACD,OAAO;IACLC,CAAC,EAAED,QAAQ;IACXE,SAAS,EAAE,aAAaJ,CAAC,KAAKC,CAAC,uBAAuBN,KAAK;EAC7D,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}