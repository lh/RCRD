{"ast":null,"code":"class ClockHourNotation {\n  /**\n   * Check if any segments touch a given hour\n   * @param {number[]} segments - Array of segment numbers\n   * @param {number} hour - Clock hour to check\n   * @returns {boolean}\n   */\n  static segmentsTouchHour(segments, hour) {\n    if (hour === 12) {\n      return segments.some(s => s >= 55 || s <= 4);\n    }\n    const startSegment = (hour - 1) * 5 % 60;\n    const endSegment = (startSegment + 4) % 60;\n\n    // Handle wrapping around midnight\n    if (startSegment > endSegment) {\n      return segments.some(s => s >= startSegment || s <= endSegment);\n    }\n    return segments.some(s => s >= startSegment && s <= endSegment);\n  }\n\n  /**\n   * Build ranges from a set of hours\n   * @param {Set<number>} hours - Set of affected clock hours\n   * @returns {Array<{start: number, end: number}>}\n   */\n  static buildRanges(hours) {\n    // Handle midnight crossing pattern\n    const has11 = hours.has(11);\n    const has12 = hours.has(12);\n    const has1 = hours.has(1);\n\n    // If we have 11 and 1, we must include 12\n    if (has11 && has1) {\n      hours.add(12);\n    }\n\n    // Sort hours with special handling for midnight crossing\n    const hourList = Array.from(hours).sort((a, b) => {\n      if (has11 || has12 || has1) {\n        // Convert hours for comparison (11->23, 12->24, 1->25)\n        const aVal = a === 12 ? 24 : a === 1 ? 25 : a === 11 ? 23 : a;\n        const bVal = b === 12 ? 24 : b === 1 ? 25 : b === 11 ? 23 : b;\n        return aVal - bVal;\n      }\n      return a - b;\n    });\n    const ranges = [];\n    if (hourList.length === 0) {\n      return ranges;\n    }\n    let currentRange = {\n      start: hourList[0],\n      end: hourList[0]\n    };\n    for (let i = 1; i < hourList.length; i++) {\n      const hour = hourList[i];\n      const prevHour = currentRange.end;\n\n      // Check if hours are consecutive, including midnight crossing\n      const isConsecutive = hour === prevHour + 1 || prevHour === 12 && hour === 1 || prevHour === 11 && hour === 12;\n      if (isConsecutive) {\n        currentRange.end = hour;\n      } else {\n        ranges.push(currentRange);\n        currentRange = {\n          start: hour,\n          end: hour\n        };\n      }\n    }\n    ranges.push(currentRange);\n    return ranges;\n  }\n\n  /**\n   * Format clock hour notation for retinal detachment\n   * @param {number[]} segments - Array of affected segments\n   * @returns {string} Formatted clock hour notation\n   */\n  static formatDetachment(segments) {\n    if (!segments || segments.length === 0) {\n      return \"None\";\n    }\n    if (segments.length >= 55) {\n      return \"1-12 o'clock\";\n    }\n\n    // Get all affected hours\n    const hours = new Set();\n    for (let hour = 1; hour <= 12; hour++) {\n      if (this.segmentsTouchHour(segments, hour)) {\n        hours.add(hour);\n      }\n    }\n\n    // Special handling for hours 3, 6, and 9\n    if (segments.some(s => s >= 10 && s <= 14 || s >= 20 && s <= 24)) {\n      hours.add(3);\n    }\n    if (segments.some(s => s >= 40 && s <= 44 || s >= 50 && s <= 54)) {\n      hours.add(9);\n    }\n    if (hours.has(5) || hours.has(7)) {\n      hours.add(6);\n    }\n\n    // Build ranges\n    const ranges = this.buildRanges(hours);\n\n    // Format output\n    return ranges.map(range => `${range.start}-${range.end}`).join('; ') + \" o'clock\";\n  }\n}\n\n// Test cases\nClockHourNotation.SEGMENTS_PER_HOUR = 5;\nClockHourNotation.TOTAL_SEGMENTS = 60;\nif (typeof describe !== 'undefined') {\n  describe('ClockHourNotation', () => {\n    const testCases = [{\n      name: 'Midnight crossing with 11 and 1',\n      segments: [50, 51, 52, 0, 1, 2],\n      expected: '11-1 o\\'clock'\n    }, {\n      name: 'Midnight crossing explicit 12',\n      segments: [50, 51, 52, 55, 56, 57, 0, 1, 2],\n      expected: '11-1 o\\'clock'\n    }, {\n      name: 'Empty segments',\n      segments: [],\n      expected: 'None'\n    }, {\n      name: 'Total detachment',\n      segments: Array.from({\n        length: 58\n      }, (_, i) => i),\n      expected: '1-12 o\\'clock'\n    }, {\n      name: 'Single hour',\n      segments: [0, 1, 2, 3, 4],\n      expected: '12-12 o\\'clock'\n    }, {\n      name: 'Midnight crossing simple',\n      segments: [53, 54, 55, 56, 57, 58, 59, 0, 1, 2],\n      expected: '11-1 o\\'clock'\n    }, {\n      name: 'Multiple ranges',\n      segments: [25, 26, 27, 28, 29, 30, 40, 41, 42],\n      expected: '6-6; 9-9 o\\'clock'\n    }, {\n      name: 'Hour 6 inclusion from 5',\n      segments: [20, 21, 22, 23, 24, 25],\n      expected: '5-6 o\\'clock'\n    }, {\n      name: 'Hour 6 inclusion from 7',\n      segments: [30, 31, 32, 33, 34],\n      expected: '6-7 o\\'clock'\n    }, {\n      name: 'Hour 3 inclusion from above',\n      segments: [10, 11, 12, 13, 14],\n      expected: '3-3 o\\'clock'\n    }, {\n      name: 'Hour 9 inclusion from above',\n      segments: [40, 41, 42, 43, 44],\n      expected: '9-9 o\\'clock'\n    }, {\n      name: 'Complex midnight crossing with multiple ranges',\n      segments: [...Array.from({\n        length: 5\n      }, (_, i) => i + 50),\n      // Hour 11\n      ...Array.from({\n        length: 5\n      }, (_, i) => i + 55),\n      // Hour 12\n      ...Array.from({\n        length: 5\n      }, (_, i) => i),\n      // Hour 1\n      ...Array.from({\n        length: 5\n      }, (_, i) => i + 25) // Hour 6\n      ],\n      expected: '11-1; 6-6 o\\'clock'\n    }, {\n      name: 'Special case from screenshot',\n      segments: [...Array.from({\n        length: 15\n      }, (_, i) => i + 40),\n      // Hours 9-11\n      ...Array.from({\n        length: 25\n      }, (_, i) => i + 10) // Hours 3-7\n      ],\n      expected: '9-12; 3-8 o\\'clock'\n    }];\n    testCases.forEach(({\n      name,\n      segments,\n      expected\n    }) => {\n      test(name, () => {\n        expect(ClockHourNotation.formatDetachment(segments)).toBe(expected);\n      });\n    });\n  });\n}\nexport { ClockHourNotation };","map":{"version":3,"names":["ClockHourNotation","segmentsTouchHour","segments","hour","some","s","startSegment","endSegment","buildRanges","hours","has11","has","has12","has1","add","hourList","Array","from","sort","a","b","aVal","bVal","ranges","length","currentRange","start","end","i","prevHour","isConsecutive","push","formatDetachment","Set","map","range","join","SEGMENTS_PER_HOUR","TOTAL_SEGMENTS","describe","testCases","name","expected","_","forEach","test","expect","toBe"],"sources":["/Users/rose/Code/RCRD/src/components/clock/utils/clockHourNotation.js"],"sourcesContent":["class ClockHourNotation {\n    static SEGMENTS_PER_HOUR = 5;\n    static TOTAL_SEGMENTS = 60;\n\n    /**\n     * Check if any segments touch a given hour\n     * @param {number[]} segments - Array of segment numbers\n     * @param {number} hour - Clock hour to check\n     * @returns {boolean}\n     */\n    static segmentsTouchHour(segments, hour) {\n        if (hour === 12) {\n            return segments.some(s => s >= 55 || s <= 4);\n        }\n\n        const startSegment = ((hour - 1) * 5) % 60;\n        const endSegment = (startSegment + 4) % 60;\n\n        // Handle wrapping around midnight\n        if (startSegment > endSegment) {\n            return segments.some(s => s >= startSegment || s <= endSegment);\n        }\n        return segments.some(s => s >= startSegment && s <= endSegment);\n    }\n\n    /**\n     * Build ranges from a set of hours\n     * @param {Set<number>} hours - Set of affected clock hours\n     * @returns {Array<{start: number, end: number}>}\n     */\n    static buildRanges(hours) {\n        // Handle midnight crossing pattern\n        const has11 = hours.has(11);\n        const has12 = hours.has(12);\n        const has1 = hours.has(1);\n\n        // If we have 11 and 1, we must include 12\n        if (has11 && has1) {\n            hours.add(12);\n        }\n\n        // Sort hours with special handling for midnight crossing\n        const hourList = Array.from(hours).sort((a, b) => {\n            if (has11 || has12 || has1) {\n                // Convert hours for comparison (11->23, 12->24, 1->25)\n                const aVal = a === 12 ? 24 : (a === 1 ? 25 : (a === 11 ? 23 : a));\n                const bVal = b === 12 ? 24 : (b === 1 ? 25 : (b === 11 ? 23 : b));\n                return aVal - bVal;\n            }\n            return a - b;\n        });\n\n        const ranges = [];\n        if (hourList.length === 0) {\n            return ranges;\n        }\n\n        let currentRange = { start: hourList[0], end: hourList[0] };\n\n        for (let i = 1; i < hourList.length; i++) {\n            const hour = hourList[i];\n            const prevHour = currentRange.end;\n            \n            // Check if hours are consecutive, including midnight crossing\n            const isConsecutive = \n                hour === prevHour + 1 || \n                (prevHour === 12 && hour === 1) ||\n                (prevHour === 11 && hour === 12);\n\n            if (isConsecutive) {\n                currentRange.end = hour;\n            } else {\n                ranges.push(currentRange);\n                currentRange = { start: hour, end: hour };\n            }\n        }\n        ranges.push(currentRange);\n\n        return ranges;\n    }\n\n    /**\n     * Format clock hour notation for retinal detachment\n     * @param {number[]} segments - Array of affected segments\n     * @returns {string} Formatted clock hour notation\n     */\n    static formatDetachment(segments) {\n        if (!segments || segments.length === 0) {\n            return \"None\";\n        }\n\n        if (segments.length >= 55) {\n            return \"1-12 o'clock\";\n        }\n\n        // Get all affected hours\n        const hours = new Set();\n        for (let hour = 1; hour <= 12; hour++) {\n            if (this.segmentsTouchHour(segments, hour)) {\n                hours.add(hour);\n            }\n        }\n\n        // Special handling for hours 3, 6, and 9\n        if (segments.some(s => (s >= 10 && s <= 14) || (s >= 20 && s <= 24))) {\n            hours.add(3);\n        }\n        if (segments.some(s => (s >= 40 && s <= 44) || (s >= 50 && s <= 54))) {\n            hours.add(9);\n        }\n        if (hours.has(5) || hours.has(7)) {\n            hours.add(6);\n        }\n\n        // Build ranges\n        const ranges = this.buildRanges(hours);\n\n        // Format output\n        return ranges\n            .map(range => `${range.start}-${range.end}`)\n            .join('; ') + \" o'clock\";\n    }\n}\n\n\n// Test cases\nif (typeof describe !== 'undefined') {\n    describe('ClockHourNotation', () => {\n        const testCases = [\n            {\n                name: 'Midnight crossing with 11 and 1',\n                segments: [50, 51, 52, 0, 1, 2],\n                expected: '11-1 o\\'clock'\n            },\n            {\n                name: 'Midnight crossing explicit 12',\n                segments: [50, 51, 52, 55, 56, 57, 0, 1, 2],\n                expected: '11-1 o\\'clock'\n            },\n            {\n                name: 'Empty segments',\n                segments: [],\n                expected: 'None'\n            },\n            {\n                name: 'Total detachment',\n                segments: Array.from({ length: 58 }, (_, i) => i),\n                expected: '1-12 o\\'clock'\n            },\n            {\n                name: 'Single hour',\n                segments: [0, 1, 2, 3, 4],\n                expected: '12-12 o\\'clock'\n            },\n            {\n                name: 'Midnight crossing simple',\n                segments: [53, 54, 55, 56, 57, 58, 59, 0, 1, 2],\n                expected: '11-1 o\\'clock'\n            },\n            {\n                name: 'Multiple ranges',\n                segments: [25, 26, 27, 28, 29, 30, 40, 41, 42],\n                expected: '6-6; 9-9 o\\'clock'\n            },\n            {\n                name: 'Hour 6 inclusion from 5',\n                segments: [20, 21, 22, 23, 24, 25],\n                expected: '5-6 o\\'clock'\n            },\n            {\n                name: 'Hour 6 inclusion from 7',\n                segments: [30, 31, 32, 33, 34],\n                expected: '6-7 o\\'clock'\n            },\n            {\n                name: 'Hour 3 inclusion from above',\n                segments: [10, 11, 12, 13, 14],\n                expected: '3-3 o\\'clock'\n            },\n            {\n                name: 'Hour 9 inclusion from above',\n                segments: [40, 41, 42, 43, 44],\n                expected: '9-9 o\\'clock'\n            },\n            {\n                name: 'Complex midnight crossing with multiple ranges',\n                segments: [\n                    ...Array.from({ length: 5 }, (_, i) => i + 50), // Hour 11\n                    ...Array.from({ length: 5 }, (_, i) => i + 55), // Hour 12\n                    ...Array.from({ length: 5 }, (_, i) => i),      // Hour 1\n                    ...Array.from({ length: 5 }, (_, i) => i + 25), // Hour 6\n                ],\n                expected: '11-1; 6-6 o\\'clock'\n            },\n            {\n                name: 'Special case from screenshot',\n                segments: [\n                    ...Array.from({ length: 15 }, (_, i) => i + 40), // Hours 9-11\n                    ...Array.from({ length: 25 }, (_, i) => i + 10)  // Hours 3-7\n                ],\n                expected: '9-12; 3-8 o\\'clock'\n            }\n        ];\n\n        testCases.forEach(({ name, segments, expected }) => {\n            test(name, () => {\n                expect(ClockHourNotation.formatDetachment(segments)).toBe(expected);\n            });\n        });\n    });\n}\n\nexport { ClockHourNotation };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}