{"ast":null,"code":"/**\n * Calculates the expected segments for a given hour range on the clock face\n * @param {number} startHour - Starting hour (1-12)\n * @param {number} endHour - Ending hour (1-12)\n * @returns {number[]} Array of segment numbers\n */\nexport const calculateSegmentsForHourRange = (startHour, end) => {\n  const segments = [];\n  const startSegment = (startHour - 1) * 5 % 60;\n  const endSegment = (end * 5 - 1) % 60;\n\n  // Handle wraparound case (e.g., 11-1 o'clock)\n  if (endSegment < startSegment) {\n    // Add segments from start to 59\n    for (let i = startSegment; i < 60; i++) {\n      segments.push(i);\n    }\n    // Add segments from 0 to end\n    for (let i = 0; i <= endSegment; i++) {\n      segments.push(i);\n    }\n  } else {\n    // Normal case\n    for (let i = startSegment; i <= endSegment; i++) {\n      segments.push(i);\n    }\n  }\n  return segments;\n};","map":{"version":3,"names":["calculateSegmentsForHourRange","startHour","end","segments","startSegment","endSegment","i","push"],"sources":["/Users/rose/Code/RCRD/src/components/clock/utils/segmentCalculator.js"],"sourcesContent":["/**\n * Calculates the expected segments for a given hour range on the clock face\n * @param {number} startHour - Starting hour (1-12)\n * @param {number} endHour - Ending hour (1-12)\n * @returns {number[]} Array of segment numbers\n */\nexport const calculateSegmentsForHourRange = (startHour, end) => {\n    const segments = [];\n    const startSegment = ((startHour - 1) * 5) % 60;\n    const endSegment = (end * 5 - 1) % 60;\n    \n    // Handle wraparound case (e.g., 11-1 o'clock)\n    if (endSegment < startSegment) {\n        // Add segments from start to 59\n        for (let i = startSegment; i < 60; i++) {\n            segments.push(i);\n        }\n        // Add segments from 0 to end\n        for (let i = 0; i <= endSegment; i++) {\n            segments.push(i);\n        }\n    } else {\n        // Normal case\n        for (let i = startSegment; i <= endSegment; i++) {\n            segments.push(i);\n        }\n    }\n    \n    return segments;\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,6BAA6B,GAAGA,CAACC,SAAS,EAAEC,GAAG,KAAK;EAC7D,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAMC,YAAY,GAAI,CAACH,SAAS,GAAG,CAAC,IAAI,CAAC,GAAI,EAAE;EAC/C,MAAMI,UAAU,GAAG,CAACH,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE;;EAErC;EACA,IAAIG,UAAU,GAAGD,YAAY,EAAE;IAC3B;IACA,KAAK,IAAIE,CAAC,GAAGF,YAAY,EAAEE,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACpCH,QAAQ,CAACI,IAAI,CAACD,CAAC,CAAC;IACpB;IACA;IACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAID,UAAU,EAAEC,CAAC,EAAE,EAAE;MAClCH,QAAQ,CAACI,IAAI,CAACD,CAAC,CAAC;IACpB;EACJ,CAAC,MAAM;IACH;IACA,KAAK,IAAIA,CAAC,GAAGF,YAAY,EAAEE,CAAC,IAAID,UAAU,EAAEC,CAAC,EAAE,EAAE;MAC7CH,QAAQ,CAACI,IAAI,CAACD,CAAC,CAAC;IACpB;EACJ;EAEA,OAAOH,QAAQ;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}