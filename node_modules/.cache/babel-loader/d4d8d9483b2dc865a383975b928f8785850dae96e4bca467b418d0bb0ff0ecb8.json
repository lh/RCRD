{"ast":null,"code":"export const segmentToHour = segment => Math.floor(segment / 5) + 1;\nexport const getPosition = (hour, radius) => {\n  // Convert hour to angle, starting from 12 o'clock\n  const angle = hour * 30 * (Math.PI / 180); // 360째 / 12 hours = 30째 per hour\n  return {\n    x: radius * Math.sin(angle),\n    y: radius * Math.cos(angle),\n    angle: hour * 30 // Store angle in degrees for tear rotation\n  };\n};\nexport const getSegmentPosition = (segment, radius) => {\n  // Convert segment number to angle, starting from 12 o'clock\n  const angle = segment * 6 * (Math.PI / 180); // Each segment is 6 degrees\n  // Use standard clockwise rotation from 12 o'clock\n  return {\n    x: radius * Math.sin(angle),\n    // Use sin for x\n    y: radius * Math.cos(angle) // Use cos for y (negative to go clockwise)\n  };\n};\nexport const createTearPath = (x, y, angle) => {\n  const tearPath = `\n    M -4 -8\n    c -0.091 -0.936 0.333 -1.232 0.777 0.658\n    c 0.389 1.655 1.060 3.281 1.060 3.281\n    s 0 0.254 1.022 0.617\n    c 0.793 0.282 2.183 -2.882 2.183 -2.882\n    s 1.953 -4.433 1.437 -1.294\n    c -1.217 7.410 -1.640 6.716 -1.664 6.897\n    c -0.024 0.181 -0.510 0.596 -0.510 0.596\n    s -0.178 0.183 -0.585 0.327\n    c -3.121 1.110 -3.163 -3.001 -3.163 -3.001\n    L -4 -8\n  `;\n  return {\n    d: tearPath,\n    // Adjust rotation to match clock orientation - this is wrong!\n    transform: `translate(${x}, ${y}) scale(1.5) rotate(${angle + 180})`\n  };\n};","map":{"version":3,"names":["segmentToHour","segment","Math","floor","getPosition","hour","radius","angle","PI","x","sin","y","cos","getSegmentPosition","createTearPath","tearPath","d","transform"],"sources":["/Users/rose/Code/RD_risk/retinal-calculator/src/components/clock/utils/clockCalculations.js"],"sourcesContent":["export const segmentToHour = (segment) => Math.floor(segment / 5) + 1;\n\nexport const getPosition = (hour, radius) => {\n  // Convert hour to angle, starting from 12 o'clock\n  const angle = (hour * 30) * (Math.PI / 180);  // 360째 / 12 hours = 30째 per hour\n  return {\n    x: radius * Math.sin(angle),\n    y: radius * Math.cos(angle),\n    angle: (hour * 30)  // Store angle in degrees for tear rotation\n  };\n};\n\nexport const getSegmentPosition = (segment, radius) => {\n  // Convert segment number to angle, starting from 12 o'clock\n  const angle = (segment * 6) * (Math.PI / 180);  // Each segment is 6 degrees\n  // Use standard clockwise rotation from 12 o'clock\n  return {\n    x: radius * Math.sin(angle),   // Use sin for x\n    y: radius * Math.cos(angle)    // Use cos for y (negative to go clockwise)\n  };\n};\n\nexport const createTearPath = (x, y, angle) => {\n  const tearPath = `\n    M -4 -8\n    c -0.091 -0.936 0.333 -1.232 0.777 0.658\n    c 0.389 1.655 1.060 3.281 1.060 3.281\n    s 0 0.254 1.022 0.617\n    c 0.793 0.282 2.183 -2.882 2.183 -2.882\n    s 1.953 -4.433 1.437 -1.294\n    c -1.217 7.410 -1.640 6.716 -1.664 6.897\n    c -0.024 0.181 -0.510 0.596 -0.510 0.596\n    s -0.178 0.183 -0.585 0.327\n    c -3.121 1.110 -3.163 -3.001 -3.163 -3.001\n    L -4 -8\n  `;\n  return {\n    d: tearPath,\n     // Adjust rotation to match clock orientation - this is wrong!\n    transform: `translate(${x}, ${y}) scale(1.5) rotate(${angle + 180})`\n  };\n};\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAIC,OAAO,IAAKC,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC;AAErE,OAAO,MAAMG,WAAW,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EAC3C;EACA,MAAMC,KAAK,GAAIF,IAAI,GAAG,EAAE,IAAKH,IAAI,CAACM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAE;EAC9C,OAAO;IACLC,CAAC,EAAEH,MAAM,GAAGJ,IAAI,CAACQ,GAAG,CAACH,KAAK,CAAC;IAC3BI,CAAC,EAAEL,MAAM,GAAGJ,IAAI,CAACU,GAAG,CAACL,KAAK,CAAC;IAC3BA,KAAK,EAAGF,IAAI,GAAG,EAAG,CAAE;EACtB,CAAC;AACH,CAAC;AAED,OAAO,MAAMQ,kBAAkB,GAAGA,CAACZ,OAAO,EAAEK,MAAM,KAAK;EACrD;EACA,MAAMC,KAAK,GAAIN,OAAO,GAAG,CAAC,IAAKC,IAAI,CAACM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAE;EAChD;EACA,OAAO;IACLC,CAAC,EAAEH,MAAM,GAAGJ,IAAI,CAACQ,GAAG,CAACH,KAAK,CAAC;IAAI;IAC/BI,CAAC,EAAEL,MAAM,GAAGJ,IAAI,CAACU,GAAG,CAACL,KAAK,CAAC,CAAI;EACjC,CAAC;AACH,CAAC;AAED,OAAO,MAAMO,cAAc,GAAGA,CAACL,CAAC,EAAEE,CAAC,EAAEJ,KAAK,KAAK;EAC7C,MAAMQ,QAAQ,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EACD,OAAO;IACLC,CAAC,EAAED,QAAQ;IACV;IACDE,SAAS,EAAE,aAAaR,CAAC,KAAKE,CAAC,uBAAuBJ,KAAK,GAAG,GAAG;EACnE,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}