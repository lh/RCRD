{"ast":null,"code":"/**\n * Risk calculation coefficients based on the BEAVRS database study\n * @type {Object}\n */\nexport const coefficients = {\n  constant: -1.611,\n  age_group: {\n    \"45_to_64\": 0.0,\n    // Reference category\n    \"65_to_79\": 0.236,\n    \"80_plus\": 0.498,\n    \"under_45\": 0.459\n  },\n  break_location: {\n    \"9_to_3\": 0.0,\n    // Reference category\n    \"4_or_8\": 0.428,\n    \"5_to_7\": 0.607,\n    \"no_break\": 0.676\n  },\n  inferior_detachment: {\n    \"less_than_3\": 0.0,\n    // Reference category\n    \"3_to_5\": 0.441,\n    \"6_hours\": 0.435\n  },\n  total_rd: {\n    \"no\": 0.0,\n    // Reference category\n    \"yes\": 0.663\n  },\n  pvr_grade: {\n    \"none_A_B\": 0.0,\n    // Reference category\n    \"C\": 0.220\n  },\n  gauge: {\n    \"20g\": 0.0,\n    // Reference category\n    \"23g\": -0.408,\n    \"25g\": -0.885,\n    \"27g\": -0.703,\n    \"not_recorded\": -0.738\n  }\n};\n\n/**\n * PVR grade options for the risk calculator form\n * @type {Array<{value: string, label: string}>}\n */\nexport const pvrOptions = [{\n  value: 'none',\n  label: 'No PVR'\n}, {\n  value: 'A',\n  label: 'Grade A'\n}, {\n  value: 'B',\n  label: 'Grade B'\n}, {\n  value: 'C',\n  label: 'Grade C'\n}];\n\n/**\n * Vitrectomy gauge options for the risk calculator form\n * @type {Array<{value: string, label: string}>}\n */\nexport const gaugeOptions = [{\n  value: '20g',\n  label: '20 gauge'\n}, {\n  value: '23g',\n  label: '23 gauge'\n}, {\n  value: '25g',\n  label: '25 gauge'\n}, {\n  value: '27g',\n  label: '27 gauge'\n}, {\n  value: 'not_recorded',\n  label: 'Not recorded'\n}];\n\n// // Run validation tests only if this file is executed directly\n// if (import.meta.url === import.meta.resolve('./riskCalculatorConstants.js')) {\n//     const validateConstants = () => {\n//         const testCases = [\n//             {\n//                 name: \"Coefficients structure\",\n//                 fn: () => {\n//                     const requiredKeys = ['constant', 'age_group', 'break_location', \n//                                         'inferior_detachment', 'total_rd', 'pvr_grade', 'gauge'];\n//                     return requiredKeys.every(key => key in coefficients);\n//                 }\n//             },\n//             {\n//                 name: \"Reference categories have 0.0 coefficient\",\n//                 fn: () => {\n//                     return coefficients.age_group[\"45_to_64\"] === 0.0 &&\n//                            coefficients.break_location[\"9_to_3\"] === 0.0 &&\n//                            coefficients.inferior_detachment[\"less_than_3\"] === 0.0 &&\n//                            coefficients.total_rd[\"no\"] === 0.0 &&\n//                            coefficients.pvr_grade[\"none_A_B\"] === 0.0 &&\n//                            coefficients.gauge[\"20g\"] === 0.0;\n//                 }\n//             },\n//             {\n//                 name: \"PVR options validity\",\n//                 fn: () => {\n//                     const requiredValues = ['none', 'A', 'B', 'C'];\n//                     const values = pvrOptions.map(opt => opt.value);\n//                     return requiredValues.every(val => values.includes(val));\n//                 }\n//             },\n//             {\n//                 name: \"Gauge options validity\",\n//                 fn: () => {\n//                     const requiredValues = ['20g', '23g', '25g', '27g', 'not_recorded'];\n//                     const values = gaugeOptions.map(opt => opt.value);\n//                     return requiredValues.every(val => values.includes(val));\n//                 }\n//             },\n//             {\n//                 name: \"Options format consistency\",\n//                 fn: () => {\n//                     return pvrOptions.every(opt => 'value' in opt && 'label' in opt) &&\n//                            gaugeOptions.every(opt => 'value' in opt && 'label' in opt);\n//                 }\n//             }\n//         ];\n\n//         // Run tests and collect results\n//         const results = testCases.map(testCase => {\n//             const passed = testCase.fn();\n//             return {\n//                 name: testCase.name,\n//                 passed: passed\n//             };\n//         });\n\n//         // Print results\n//         results.forEach(result => {\n//             console.log(`\\nTest: ${result.name}`);\n//             console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n//         });\n\n//         // Return overall test status\n//         return results.every(r => r.passed);\n//     };\n\n//     // Run the validation\n//     const testsValid = validateConstants();\n//     console.log(`\\nAll validations ${testsValid ? 'PASSED' : 'FAILED'}`);\n// }","map":{"version":3,"names":["coefficients","constant","age_group","break_location","inferior_detachment","total_rd","pvr_grade","gauge","pvrOptions","value","label","gaugeOptions"],"sources":["/Users/rose/Code/RCRD/src/constants/riskCalculatorConstants.js"],"sourcesContent":["/**\n * Risk calculation coefficients based on the BEAVRS database study\n * @type {Object}\n */\nexport const coefficients = {\n    constant: -1.611,\n\n    age_group: {\n        \"45_to_64\": 0.0,    // Reference category\n        \"65_to_79\": 0.236,\n        \"80_plus\": 0.498,\n        \"under_45\": 0.459\n    },\n\n    break_location: {\n        \"9_to_3\": 0.0,      // Reference category\n        \"4_or_8\": 0.428,\n        \"5_to_7\": 0.607,\n        \"no_break\": 0.676\n    },\n\n    inferior_detachment: {\n        \"less_than_3\": 0.0,  // Reference category\n        \"3_to_5\": 0.441,\n        \"6_hours\": 0.435\n    },\n\n    total_rd: {\n        \"no\": 0.0,          // Reference category\n        \"yes\": 0.663\n    },\n\n    pvr_grade: {\n        \"none_A_B\": 0.0,    // Reference category\n        \"C\": 0.220\n    },\n\n    gauge: {              \n        \"20g\": 0.0,         // Reference category\n        \"23g\": -0.408,\n        \"25g\": -0.885,\n        \"27g\": -0.703,\n        \"not_recorded\": -0.738\n    }\n};\n\n/**\n * PVR grade options for the risk calculator form\n * @type {Array<{value: string, label: string}>}\n */\nexport const pvrOptions = [\n    { value: 'none', label: 'No PVR' },\n    { value: 'A', label: 'Grade A' },\n    { value: 'B', label: 'Grade B' },\n    { value: 'C', label: 'Grade C' }\n];\n\n/**\n * Vitrectomy gauge options for the risk calculator form\n * @type {Array<{value: string, label: string}>}\n */\nexport const gaugeOptions = [\n    { value: '20g', label: '20 gauge' },\n    { value: '23g', label: '23 gauge' },\n    { value: '25g', label: '25 gauge' },\n    { value: '27g', label: '27 gauge' },\n    { value: 'not_recorded', label: 'Not recorded' }\n];\n\n// // Run validation tests only if this file is executed directly\n// if (import.meta.url === import.meta.resolve('./riskCalculatorConstants.js')) {\n//     const validateConstants = () => {\n//         const testCases = [\n//             {\n//                 name: \"Coefficients structure\",\n//                 fn: () => {\n//                     const requiredKeys = ['constant', 'age_group', 'break_location', \n//                                         'inferior_detachment', 'total_rd', 'pvr_grade', 'gauge'];\n//                     return requiredKeys.every(key => key in coefficients);\n//                 }\n//             },\n//             {\n//                 name: \"Reference categories have 0.0 coefficient\",\n//                 fn: () => {\n//                     return coefficients.age_group[\"45_to_64\"] === 0.0 &&\n//                            coefficients.break_location[\"9_to_3\"] === 0.0 &&\n//                            coefficients.inferior_detachment[\"less_than_3\"] === 0.0 &&\n//                            coefficients.total_rd[\"no\"] === 0.0 &&\n//                            coefficients.pvr_grade[\"none_A_B\"] === 0.0 &&\n//                            coefficients.gauge[\"20g\"] === 0.0;\n//                 }\n//             },\n//             {\n//                 name: \"PVR options validity\",\n//                 fn: () => {\n//                     const requiredValues = ['none', 'A', 'B', 'C'];\n//                     const values = pvrOptions.map(opt => opt.value);\n//                     return requiredValues.every(val => values.includes(val));\n//                 }\n//             },\n//             {\n//                 name: \"Gauge options validity\",\n//                 fn: () => {\n//                     const requiredValues = ['20g', '23g', '25g', '27g', 'not_recorded'];\n//                     const values = gaugeOptions.map(opt => opt.value);\n//                     return requiredValues.every(val => values.includes(val));\n//                 }\n//             },\n//             {\n//                 name: \"Options format consistency\",\n//                 fn: () => {\n//                     return pvrOptions.every(opt => 'value' in opt && 'label' in opt) &&\n//                            gaugeOptions.every(opt => 'value' in opt && 'label' in opt);\n//                 }\n//             }\n//         ];\n\n//         // Run tests and collect results\n//         const results = testCases.map(testCase => {\n//             const passed = testCase.fn();\n//             return {\n//                 name: testCase.name,\n//                 passed: passed\n//             };\n//         });\n\n//         // Print results\n//         results.forEach(result => {\n//             console.log(`\\nTest: ${result.name}`);\n//             console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n//         });\n\n//         // Return overall test status\n//         return results.every(r => r.passed);\n//     };\n\n//     // Run the validation\n//     const testsValid = validateConstants();\n//     console.log(`\\nAll validations ${testsValid ? 'PASSED' : 'FAILED'}`);\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAG;EACxBC,QAAQ,EAAE,CAAC,KAAK;EAEhBC,SAAS,EAAE;IACP,UAAU,EAAE,GAAG;IAAK;IACpB,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE,KAAK;IAChB,UAAU,EAAE;EAChB,CAAC;EAEDC,cAAc,EAAE;IACZ,QAAQ,EAAE,GAAG;IAAO;IACpB,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,KAAK;IACf,UAAU,EAAE;EAChB,CAAC;EAEDC,mBAAmB,EAAE;IACjB,aAAa,EAAE,GAAG;IAAG;IACrB,QAAQ,EAAE,KAAK;IACf,SAAS,EAAE;EACf,CAAC;EAEDC,QAAQ,EAAE;IACN,IAAI,EAAE,GAAG;IAAW;IACpB,KAAK,EAAE;EACX,CAAC;EAEDC,SAAS,EAAE;IACP,UAAU,EAAE,GAAG;IAAK;IACpB,GAAG,EAAE;EACT,CAAC;EAEDC,KAAK,EAAE;IACH,KAAK,EAAE,GAAG;IAAU;IACpB,KAAK,EAAE,CAAC,KAAK;IACb,KAAK,EAAE,CAAC,KAAK;IACb,KAAK,EAAE,CAAC,KAAK;IACb,cAAc,EAAE,CAAC;EACrB;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,CACtB;EAAEC,KAAK,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAS,CAAC,EAClC;EAAED,KAAK,EAAE,GAAG;EAAEC,KAAK,EAAE;AAAU,CAAC,EAChC;EAAED,KAAK,EAAE,GAAG;EAAEC,KAAK,EAAE;AAAU,CAAC,EAChC;EAAED,KAAK,EAAE,GAAG;EAAEC,KAAK,EAAE;AAAU,CAAC,CACnC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,CACxB;EAAEF,KAAK,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAW,CAAC,EACnC;EAAED,KAAK,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAW,CAAC,EACnC;EAAED,KAAK,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAW,CAAC,EACnC;EAAED,KAAK,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAW,CAAC,EACnC;EAAED,KAAK,EAAE,cAAc;EAAEC,KAAK,EAAE;AAAe,CAAC,CACnD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}