{"ast":null,"code":"// clockCoordinates.js\nconst SEGMENTS = 60;\nconst DEGREES_PER_SEGMENT = 360 / SEGMENTS;\nconst CoordinateSystem = {\n  // Helper functions to convert between different angle systems\n  toRadians: degrees => degrees * (Math.PI / 180),\n  toDegrees: radians => radians * (180 / Math.PI),\n  // Convert from clock position (0 at 12, CW) to math angles (0 at 3, CCW)\n  clockToMathAngle: clockDegrees => {\n    return (90 - clockDegrees) % 360; // 90° offset to align coordinate systems\n  },\n  // Convert from math angles to clock position\n  mathToClockAngle: mathDegrees => {\n    return (90 - mathDegrees) % 360;\n  },\n  // Get x,y coordinates for a given clock angle\n  getPointFromClockAngle: (degrees, radius) => {\n    const mathAngle = CoordinateSystem.toRadians(CoordinateSystem.clockToMathAngle(degrees));\n    return {\n      x: radius * Math.cos(mathAngle),\n      y: radius * Math.sin(mathAngle)\n    };\n  },\n  // Get clock angle from mouse/touch point\n  getClockAngleFromPoint: (x, y) => {\n    const mathAngle = CoordinateSystem.toDegrees(Math.atan2(y, x));\n    return CoordinateSystem.mathToClockAngle(mathAngle);\n  },\n  // Convert segment number to clock angle\n  segmentToAngle: segment => {\n    return segment * DEGREES_PER_SEGMENT % 360;\n  },\n  // Convert clock angle to segment number\n  angleToSegment: angle => {\n    return Math.floor(angle / DEGREES_PER_SEGMENT);\n  },\n  // Direct segment to point conversion\n  getPointFromSegment: (segment, radius) => {\n    const clockAngle = CoordinateSystem.segmentToAngle(segment);\n    return CoordinateSystem.getPointFromClockAngle(clockAngle, radius);\n  },\n  // Direct point to segment conversion\n  getSegmentFromPoint: (x, y) => {\n    const clockAngle = CoordinateSystem.getClockAngleFromPoint(x, y);\n    return CoordinateSystem.angleToSegment(clockAngle);\n  }\n};\nexport default CoordinateSystem;","map":{"version":3,"names":["SEGMENTS","DEGREES_PER_SEGMENT","CoordinateSystem","toRadians","degrees","Math","PI","toDegrees","radians","clockToMathAngle","clockDegrees","mathToClockAngle","mathDegrees","getPointFromClockAngle","radius","mathAngle","x","cos","y","sin","getClockAngleFromPoint","atan2","segmentToAngle","segment","angleToSegment","angle","floor","getPointFromSegment","clockAngle","getSegmentFromPoint"],"sources":["/Users/rose/Code/RD_risk/retinal-calculator/src/components/clock/utils/clockCoordinates.js"],"sourcesContent":["// clockCoordinates.js\nconst SEGMENTS = 60;\nconst DEGREES_PER_SEGMENT = 360 / SEGMENTS;\n\nconst CoordinateSystem = {\n  // Helper functions to convert between different angle systems\n  toRadians: (degrees) => degrees * (Math.PI / 180),\n  toDegrees: (radians) => radians * (180 / Math.PI),\n\n  // Convert from clock position (0 at 12, CW) to math angles (0 at 3, CCW)\n  clockToMathAngle: (clockDegrees) => {\n    return (90 - clockDegrees) % 360;  // 90° offset to align coordinate systems\n  },\n\n  // Convert from math angles to clock position\n  mathToClockAngle: (mathDegrees) => {\n    return (90 - mathDegrees) % 360;\n  },\n\n  // Get x,y coordinates for a given clock angle\n  getPointFromClockAngle: (degrees, radius) => {\n    const mathAngle = CoordinateSystem.toRadians(CoordinateSystem.clockToMathAngle(degrees));\n    return {\n      x: radius * Math.cos(mathAngle),\n      y: radius * Math.sin(mathAngle)\n    };\n  },\n\n  // Get clock angle from mouse/touch point\n  getClockAngleFromPoint: (x, y) => {\n    const mathAngle = CoordinateSystem.toDegrees(Math.atan2(y, x));\n    return CoordinateSystem.mathToClockAngle(mathAngle);\n  },\n\n  // Convert segment number to clock angle\n  segmentToAngle: (segment) => {\n    return (segment * DEGREES_PER_SEGMENT) % 360;\n  },\n\n  // Convert clock angle to segment number\n  angleToSegment: (angle) => {\n    return Math.floor(angle / DEGREES_PER_SEGMENT);\n  },\n\n  // Direct segment to point conversion\n  getPointFromSegment: (segment, radius) => {\n    const clockAngle = CoordinateSystem.segmentToAngle(segment);\n    return CoordinateSystem.getPointFromClockAngle(clockAngle, radius);\n  },\n\n  // Direct point to segment conversion\n  getSegmentFromPoint: (x, y) => {\n    const clockAngle = CoordinateSystem.getClockAngleFromPoint(x, y);\n    return CoordinateSystem.angleToSegment(clockAngle);\n  }\n};\n\nexport default CoordinateSystem;"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,EAAE;AACnB,MAAMC,mBAAmB,GAAG,GAAG,GAAGD,QAAQ;AAE1C,MAAME,gBAAgB,GAAG;EACvB;EACAC,SAAS,EAAGC,OAAO,IAAKA,OAAO,IAAIC,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC;EACjDC,SAAS,EAAGC,OAAO,IAAKA,OAAO,IAAI,GAAG,GAAGH,IAAI,CAACC,EAAE,CAAC;EAEjD;EACAG,gBAAgB,EAAGC,YAAY,IAAK;IAClC,OAAO,CAAC,EAAE,GAAGA,YAAY,IAAI,GAAG,CAAC,CAAE;EACrC,CAAC;EAED;EACAC,gBAAgB,EAAGC,WAAW,IAAK;IACjC,OAAO,CAAC,EAAE,GAAGA,WAAW,IAAI,GAAG;EACjC,CAAC;EAED;EACAC,sBAAsB,EAAEA,CAACT,OAAO,EAAEU,MAAM,KAAK;IAC3C,MAAMC,SAAS,GAAGb,gBAAgB,CAACC,SAAS,CAACD,gBAAgB,CAACO,gBAAgB,CAACL,OAAO,CAAC,CAAC;IACxF,OAAO;MACLY,CAAC,EAAEF,MAAM,GAAGT,IAAI,CAACY,GAAG,CAACF,SAAS,CAAC;MAC/BG,CAAC,EAAEJ,MAAM,GAAGT,IAAI,CAACc,GAAG,CAACJ,SAAS;IAChC,CAAC;EACH,CAAC;EAED;EACAK,sBAAsB,EAAEA,CAACJ,CAAC,EAAEE,CAAC,KAAK;IAChC,MAAMH,SAAS,GAAGb,gBAAgB,CAACK,SAAS,CAACF,IAAI,CAACgB,KAAK,CAACH,CAAC,EAAEF,CAAC,CAAC,CAAC;IAC9D,OAAOd,gBAAgB,CAACS,gBAAgB,CAACI,SAAS,CAAC;EACrD,CAAC;EAED;EACAO,cAAc,EAAGC,OAAO,IAAK;IAC3B,OAAQA,OAAO,GAAGtB,mBAAmB,GAAI,GAAG;EAC9C,CAAC;EAED;EACAuB,cAAc,EAAGC,KAAK,IAAK;IACzB,OAAOpB,IAAI,CAACqB,KAAK,CAACD,KAAK,GAAGxB,mBAAmB,CAAC;EAChD,CAAC;EAED;EACA0B,mBAAmB,EAAEA,CAACJ,OAAO,EAAET,MAAM,KAAK;IACxC,MAAMc,UAAU,GAAG1B,gBAAgB,CAACoB,cAAc,CAACC,OAAO,CAAC;IAC3D,OAAOrB,gBAAgB,CAACW,sBAAsB,CAACe,UAAU,EAAEd,MAAM,CAAC;EACpE,CAAC;EAED;EACAe,mBAAmB,EAAEA,CAACb,CAAC,EAAEE,CAAC,KAAK;IAC7B,MAAMU,UAAU,GAAG1B,gBAAgB,CAACkB,sBAAsB,CAACJ,CAAC,EAAEE,CAAC,CAAC;IAChE,OAAOhB,gBAAgB,CAACsB,cAAc,CAACI,UAAU,CAAC;EACpD;AACF,CAAC;AAED,eAAe1B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}