{"ast":null,"code":"import { coefficients } from '../constants/riskCalculatorConstants';\nexport const getAgeGroup = age => {\n  if (!age) return \"45_to_64\"; // default to reference category\n  const ageNum = parseInt(age);\n  if (ageNum < 45) return \"under_45\";\n  if (ageNum >= 80) return \"80_plus\";\n  if (ageNum >= 65) return \"65_to_79\";\n  return \"45_to_64\";\n};\nexport const getBreakLocation = selectedHours => {\n  if (selectedHours.length === 0) return \"no_break\";\n  const has4or8 = selectedHours.includes(4) || selectedHours.includes(8);\n  const has5to7 = selectedHours.includes(5) || selectedHours.includes(6) || selectedHours.includes(7);\n  if (has5to7) return \"5_to_7\"; // 5-7 takes precedence\n  if (has4or8) return \"4_or_8\";\n  return \"9_to_3\"; // reference category\n};\nexport const getInferiorDetachment = detachmentSegments => {\n  const affectedHours = Array.from(new Set(detachmentSegments.map(seg => Math.floor(seg / 5) + 1)));\n  const has6 = affectedHours.includes(6);\n  const has3to5 = [3, 4, 5].some(h => affectedHours.includes(h));\n  if (has6) return \"6_hours\";\n  if (has3to5) return \"3_to_5\";\n  return \"less_than_3\"; // reference category\n};\nexport const isTotalRD = detachmentSegments => {\n  const affectedHours = Array.from(new Set(detachmentSegments.map(seg => Math.floor(seg / 5) + 1)));\n  return affectedHours.length >= 10 ? \"yes\" : \"no\";\n};\nexport const getPVRGrade = pvrGrade => {\n  return pvrGrade === 'C' ? \"C\" : \"none_A_B\";\n};\nexport const calculateRiskWithSteps = ({\n  age,\n  pvrGrade,\n  vitrectomyGauge,\n  selectedHours,\n  detachmentSegments\n}) => {\n  const steps = [];\n  let logit = coefficients.constant;\n  steps.push({\n    label: \"Constant\",\n    value: coefficients.constant.toFixed(3)\n  });\n\n  // Age coefficient\n  const ageGroup = getAgeGroup(age);\n  const ageCoef = coefficients.age_group[ageGroup];\n  logit += ageCoef;\n  steps.push({\n    label: \"Age group\",\n    value: ageCoef.toFixed(3),\n    detail: `(${ageGroup.replace(/_/g, ' ')})`\n  });\n\n  // Break location coefficient\n  const breakLoc = getBreakLocation(selectedHours);\n  const breakCoef = coefficients.break_location[breakLoc];\n  logit += breakCoef;\n  steps.push({\n    label: \"Break location\",\n    value: breakCoef.toFixed(3),\n    detail: `(${breakLoc.replace(/_/g, ' ')} o'clock)`\n  });\n\n  // RD location coefficients\n  const totalRD = isTotalRD(detachmentSegments);\n  if (totalRD === \"yes\") {\n    const rdCoef = coefficients.total_rd.yes;\n    logit += rdCoef;\n    steps.push({\n      label: \"Total RD\",\n      value: rdCoef.toFixed(3)\n    });\n  } else {\n    const infDet = getInferiorDetachment(detachmentSegments);\n    const infDetCoef = coefficients.inferior_detachment[infDet];\n    logit += infDetCoef;\n    steps.push({\n      label: \"Inferior detachment\",\n      value: infDetCoef.toFixed(3),\n      detail: `(${infDet.replace(/_/g, ' ')} o'clock)`\n    });\n  }\n\n  // PVR grade coefficient\n  const pvrType = getPVRGrade(pvrGrade);\n  const pvrCoef = coefficients.pvr_grade[pvrType];\n  logit += pvrCoef;\n  steps.push({\n    label: \"PVR grade\",\n    value: pvrCoef.toFixed(3),\n    detail: `(grade ${pvrType === \"C\" ? \"C\" : \"A/B\"})`\n  });\n\n  // Vitrectomy gauge coefficient\n  const gaugeCoef = coefficients.gauge[vitrectomyGauge.toLowerCase()];\n  logit += gaugeCoef;\n  steps.push({\n    label: \"Vitrectomy gauge\",\n    value: gaugeCoef.toFixed(3),\n    detail: `(${vitrectomyGauge}, odds ratio ${Math.exp(gaugeCoef).toFixed(3)})`\n  });\n\n  // Final calculations\n  const probability = 1 / (1 + Math.exp(-logit));\n  return {\n    steps,\n    logit: logit.toFixed(3),\n    probability: (probability * 100).toFixed(1)\n  };\n};","map":{"version":3,"names":["coefficients","getAgeGroup","age","ageNum","parseInt","getBreakLocation","selectedHours","length","has4or8","includes","has5to7","getInferiorDetachment","detachmentSegments","affectedHours","Array","from","Set","map","seg","Math","floor","has6","has3to5","some","h","isTotalRD","getPVRGrade","pvrGrade","calculateRiskWithSteps","vitrectomyGauge","steps","logit","constant","push","label","value","toFixed","ageGroup","ageCoef","age_group","detail","replace","breakLoc","breakCoef","break_location","totalRD","rdCoef","total_rd","yes","infDet","infDetCoef","inferior_detachment","pvrType","pvrCoef","pvr_grade","gaugeCoef","gauge","toLowerCase","exp","probability"],"sources":["/Users/rose/Code/RCRD/src/utils/riskCalculations.js"],"sourcesContent":["import { coefficients } from '../constants/riskCalculatorConstants';\n\nexport const getAgeGroup = (age) => {\n    if (!age) return \"45_to_64\"; // default to reference category\n    const ageNum = parseInt(age);\n    if (ageNum < 45) return \"under_45\";\n    if (ageNum >= 80) return \"80_plus\";\n    if (ageNum >= 65) return \"65_to_79\";\n    return \"45_to_64\";\n};\n\nexport const getBreakLocation = (selectedHours) => {\n    if (selectedHours.length === 0) return \"no_break\";\n\n    const has4or8 = selectedHours.includes(4) || selectedHours.includes(8);\n    const has5to7 = selectedHours.includes(5) || selectedHours.includes(6) || selectedHours.includes(7);\n\n    if (has5to7) return \"5_to_7\";  // 5-7 takes precedence\n    if (has4or8) return \"4_or_8\";\n    return \"9_to_3\";  // reference category\n};\n\nexport const getInferiorDetachment = (detachmentSegments) => {\n    const affectedHours = Array.from(new Set(detachmentSegments.map(seg =>\n        Math.floor(seg / 5) + 1\n    )));\n\n    const has6 = affectedHours.includes(6);\n    const has3to5 = [3, 4, 5].some(h => affectedHours.includes(h));\n\n    if (has6) return \"6_hours\";\n    if (has3to5) return \"3_to_5\";\n    return \"less_than_3\";  // reference category\n};\n\nexport const isTotalRD = (detachmentSegments) => {\n    const affectedHours = Array.from(new Set(detachmentSegments.map(seg =>\n        Math.floor(seg / 5) + 1\n    )));\n    return affectedHours.length >= 10 ? \"yes\" : \"no\";\n};\n\nexport const getPVRGrade = (pvrGrade) => {\n    return pvrGrade === 'C' ? \"C\" : \"none_A_B\";\n};\n\nexport const calculateRiskWithSteps = ({\n    age,\n    pvrGrade,\n    vitrectomyGauge,\n    selectedHours,\n    detachmentSegments\n}) => {\n    const steps = [];\n    let logit = coefficients.constant;\n    steps.push({\n        label: \"Constant\",\n        value: coefficients.constant.toFixed(3)\n    });\n\n    // Age coefficient\n    const ageGroup = getAgeGroup(age);\n    const ageCoef = coefficients.age_group[ageGroup];\n    logit += ageCoef;\n    steps.push({\n        label: \"Age group\",\n        value: ageCoef.toFixed(3),\n        detail: `(${ageGroup.replace(/_/g, ' ')})`\n    });\n\n    // Break location coefficient\n    const breakLoc = getBreakLocation(selectedHours);\n    const breakCoef = coefficients.break_location[breakLoc];\n    logit += breakCoef;\n    steps.push({\n        label: \"Break location\",\n        value: breakCoef.toFixed(3),\n        detail: `(${breakLoc.replace(/_/g, ' ')} o'clock)`\n    });\n\n    // RD location coefficients\n    const totalRD = isTotalRD(detachmentSegments);\n    if (totalRD === \"yes\") {\n        const rdCoef = coefficients.total_rd.yes;\n        logit += rdCoef;\n        steps.push({\n            label: \"Total RD\",\n            value: rdCoef.toFixed(3)\n        });\n    } else {\n        const infDet = getInferiorDetachment(detachmentSegments);\n        const infDetCoef = coefficients.inferior_detachment[infDet];\n        logit += infDetCoef;\n        steps.push({\n            label: \"Inferior detachment\",\n            value: infDetCoef.toFixed(3),\n            detail: `(${infDet.replace(/_/g, ' ')} o'clock)`\n        });\n    }\n\n    // PVR grade coefficient\n    const pvrType = getPVRGrade(pvrGrade);\n    const pvrCoef = coefficients.pvr_grade[pvrType];\n    logit += pvrCoef;\n    steps.push({\n        label: \"PVR grade\",\n        value: pvrCoef.toFixed(3),\n        detail: `(grade ${pvrType === \"C\" ? \"C\" : \"A/B\"})`\n    });\n\n    // Vitrectomy gauge coefficient\n    const gaugeCoef = coefficients.gauge[vitrectomyGauge.toLowerCase()];\n    logit += gaugeCoef;\n    steps.push({\n        label: \"Vitrectomy gauge\",\n        value: gaugeCoef.toFixed(3),\n        detail: `(${vitrectomyGauge}, odds ratio ${Math.exp(gaugeCoef).toFixed(3)})`\n    });\n\n    // Final calculations\n    const probability = 1 / (1 + Math.exp(-logit));\n\n    return {\n        steps,\n        logit: logit.toFixed(3),\n        probability: (probability * 100).toFixed(1)\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}