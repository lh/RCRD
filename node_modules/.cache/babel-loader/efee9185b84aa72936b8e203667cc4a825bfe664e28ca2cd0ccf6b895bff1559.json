{"ast":null,"code":"const testSegmentCalculation = (startHour, endHour) => {\n  const calculateSegmentsForHourRange = (start, end) => {\n    const segments = [];\n    const startSegment = (start - 1) * 5;\n    const endSegment = end * 5 - 1;\n    for (let i = startSegment; i <= endSegment; i++) {\n      segments.push(i);\n    }\n    return segments;\n  };\n\n  // Test cases\n  const tests = [{\n    name: `Hours ${startHour}-${endHour}`,\n    input: {\n      start: startHour,\n      end: endHour\n    },\n    expected: calculateSegmentsForHourRange(startHour, endHour)\n  }];\n  tests.forEach(test => {\n    const result = calculateSegmentsForHourRange(test.input.start, test.input.end);\n    console.log(`Test: ${test.name}`);\n    console.log('Expected segments:', test.expected);\n    console.log('Got segments:', result);\n    console.log('Segment count:', result.length);\n    console.log('Matches expected:', JSON.stringify(result) === JSON.stringify(test.expected));\n  });\n};\n\n// Run test for 1-4 o'clock\ntestSegmentCalculation(1, 4);","map":{"version":3,"names":["testSegmentCalculation","startHour","endHour","calculateSegmentsForHourRange","start","end","segments","startSegment","endSegment","i","push","tests","name","input","expected","forEach","test","result","console","log","length","JSON","stringify"],"sources":["/Users/rose/Code/RCRD/src/tests/clockFace/segmentCalculatorTests.js"],"sourcesContent":["const testSegmentCalculation = (startHour, endHour) => {\n    const calculateSegmentsForHourRange = (start, end) => {\n        const segments = [];\n        const startSegment = (start - 1) * 5;\n        const endSegment = (end * 5) - 1;\n        \n        for (let i = startSegment; i <= endSegment; i++) {\n            segments.push(i);\n        }\n        return segments;\n    };\n\n    // Test cases\n    const tests = [\n        {\n            name: `Hours ${startHour}-${endHour}`,\n            input: { start: startHour, end: endHour },\n            expected: calculateSegmentsForHourRange(startHour, endHour)\n        }\n    ];\n\n    tests.forEach(test => {\n        const result = calculateSegmentsForHourRange(test.input.start, test.input.end);\n        console.log(`Test: ${test.name}`);\n        console.log('Expected segments:', test.expected);\n        console.log('Got segments:', result);\n        console.log('Segment count:', result.length);\n        console.log('Matches expected:', \n            JSON.stringify(result) === JSON.stringify(test.expected));\n    });\n};\n\n// Run test for 1-4 o'clock\ntestSegmentCalculation(1, 4);"],"mappings":"AAAA,MAAMA,sBAAsB,GAAGA,CAACC,SAAS,EAAEC,OAAO,KAAK;EACnD,MAAMC,6BAA6B,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAK;IAClD,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,YAAY,GAAG,CAACH,KAAK,GAAG,CAAC,IAAI,CAAC;IACpC,MAAMI,UAAU,GAAIH,GAAG,GAAG,CAAC,GAAI,CAAC;IAEhC,KAAK,IAAII,CAAC,GAAGF,YAAY,EAAEE,CAAC,IAAID,UAAU,EAAEC,CAAC,EAAE,EAAE;MAC7CH,QAAQ,CAACI,IAAI,CAACD,CAAC,CAAC;IACpB;IACA,OAAOH,QAAQ;EACnB,CAAC;;EAED;EACA,MAAMK,KAAK,GAAG,CACV;IACIC,IAAI,EAAE,SAASX,SAAS,IAAIC,OAAO,EAAE;IACrCW,KAAK,EAAE;MAAET,KAAK,EAAEH,SAAS;MAAEI,GAAG,EAAEH;IAAQ,CAAC;IACzCY,QAAQ,EAAEX,6BAA6B,CAACF,SAAS,EAAEC,OAAO;EAC9D,CAAC,CACJ;EAEDS,KAAK,CAACI,OAAO,CAACC,IAAI,IAAI;IAClB,MAAMC,MAAM,GAAGd,6BAA6B,CAACa,IAAI,CAACH,KAAK,CAACT,KAAK,EAAEY,IAAI,CAACH,KAAK,CAACR,GAAG,CAAC;IAC9Ea,OAAO,CAACC,GAAG,CAAC,SAASH,IAAI,CAACJ,IAAI,EAAE,CAAC;IACjCM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,IAAI,CAACF,QAAQ,CAAC;IAChDI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,MAAM,CAAC;IACpCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,MAAM,CAACG,MAAM,CAAC;IAC5CF,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAC3BE,IAAI,CAACC,SAAS,CAACL,MAAM,CAAC,KAAKI,IAAI,CAACC,SAAS,CAACN,IAAI,CAACF,QAAQ,CAAC,CAAC;EACjE,CAAC,CAAC;AACN,CAAC;;AAED;AACAd,sBAAsB,CAAC,CAAC,EAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}