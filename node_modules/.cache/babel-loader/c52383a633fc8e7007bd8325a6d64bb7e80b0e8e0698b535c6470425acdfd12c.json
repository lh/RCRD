{"ast":null,"code":"import { calculateSegmentsForHourRange } from '../../components/clock/utils/segmentCalculator.js';\nconst runSegmentCalculatorTests = () => {\n  const testCases = [{\n    name: \"Hours 1-4\",\n    input: {\n      start: 1,\n      end: 4\n    },\n    expected: Array.from({\n      length: 20\n    }, (_, i) => i),\n    // 0-19\n    expectedCount: 20\n  }, {\n    name: \"Single hour (hour 3)\",\n    input: {\n      start: 3,\n      end: 3\n    },\n    expected: [10, 11, 12, 13, 14],\n    expectedCount: 5\n  }, {\n    name: \"Wrap around midnight (11-1)\",\n    input: {\n      start: 11,\n      end: 1\n    },\n    expected: [...Array.from({\n      length: 10\n    }, (_, i) => i + 50), 0, 1, 2, 3, 4],\n    expectedCount: 15\n  }, {\n    name: \"Full clock (12-12)\",\n    input: {\n      start: 12,\n      end: 12\n    },\n    expected: Array.from({\n      length: 60\n    }, (_, i) => i),\n    expectedCount: 60\n  }];\n  let allTestsPassed = true;\n  testCases.forEach(test => {\n    const result = calculateSegmentsForHourRange(test.input.start, test.input.end);\n    const resultStr = JSON.stringify(result);\n    const expectedStr = JSON.stringify(test.expected);\n    const passed = resultStr === expectedStr;\n    console.log('\\n' + '='.repeat(50));\n    console.log(`Test: ${test.name}`);\n    console.log('-'.repeat(50));\n    console.log(`Input: ${test.input.start} to ${test.input.end} o'clock`);\n    console.log('Expected segments:', test.expected.join(', '));\n    console.log('Got segments:', result.join(', '));\n    console.log('Expected count:', test.expectedCount);\n    console.log('Got count:', result.length);\n    console.log('Test passed:', passed ? '✓ YES' : '✗ NO');\n    if (!passed) {\n      allTestsPassed = false;\n      console.log('\\nDifferences found:');\n      const missing = test.expected.filter(x => !result.includes(x));\n      const extra = result.filter(x => !test.expected.includes(x));\n      if (missing.length) console.log('Missing:', missing.join(', '));\n      if (extra.length) console.log('Extra:', extra.join(', '));\n    }\n  });\n  return allTestsPassed;\n};\n\n// Run tests if this file is executed directly\nif (import.meta.url === import.meta.resolve('./segmentCalculatorTests.js')) {\n  const passed = runSegmentCalculatorTests();\n  console.log(`\\n${'='.repeat(50)}`);\n  console.log(`Overall test status: ${passed ? '✓ PASSED' : '✗ FAILED'}`);\n  console.log('='.repeat(50));\n}","map":{"version":3,"names":["calculateSegmentsForHourRange","runSegmentCalculatorTests","testCases","name","input","start","end","expected","Array","from","length","_","i","expectedCount","allTestsPassed","forEach","test","result","resultStr","JSON","stringify","expectedStr","passed","console","log","repeat","join","missing","filter","x","includes","extra","import","meta","url","resolve"],"sources":["/Users/rose/Code/RCRD/src/tests/clockFace/segmentCalculatorTests.js"],"sourcesContent":["import { calculateSegmentsForHourRange } from '../../components/clock/utils/segmentCalculator.js';\n\nconst runSegmentCalculatorTests = () => {\n    const testCases = [\n        {\n            name: \"Hours 1-4\",\n            input: { start: 1, end: 4 },\n            expected: Array.from({ length: 20 }, (_, i) => i),  // 0-19\n            expectedCount: 20\n        },\n        {\n            name: \"Single hour (hour 3)\",\n            input: { start: 3, end: 3 },\n            expected: [10, 11, 12, 13, 14],\n            expectedCount: 5\n        },\n        {\n            name: \"Wrap around midnight (11-1)\",\n            input: { start: 11, end: 1 },\n            expected: [...Array.from({ length: 10 }, (_, i) => i + 50), 0, 1, 2, 3, 4],\n            expectedCount: 15\n        },\n        {\n            name: \"Full clock (12-12)\",\n            input: { start: 12, end: 12 },\n            expected: Array.from({ length: 60 }, (_, i) => i),\n            expectedCount: 60\n        }\n    ];\n\n    let allTestsPassed = true;\n\n    testCases.forEach(test => {\n        const result = calculateSegmentsForHourRange(test.input.start, test.input.end);\n        const resultStr = JSON.stringify(result);\n        const expectedStr = JSON.stringify(test.expected);\n        const passed = resultStr === expectedStr;\n        \n        console.log('\\n' + '='.repeat(50));\n        console.log(`Test: ${test.name}`);\n        console.log('-'.repeat(50));\n        console.log(`Input: ${test.input.start} to ${test.input.end} o'clock`);\n        console.log('Expected segments:', test.expected.join(', '));\n        console.log('Got segments:', result.join(', '));\n        console.log('Expected count:', test.expectedCount);\n        console.log('Got count:', result.length);\n        console.log('Test passed:', passed ? '✓ YES' : '✗ NO');\n        \n        if (!passed) {\n            allTestsPassed = false;\n            console.log('\\nDifferences found:');\n            const missing = test.expected.filter(x => !result.includes(x));\n            const extra = result.filter(x => !test.expected.includes(x));\n            if (missing.length) console.log('Missing:', missing.join(', '));\n            if (extra.length) console.log('Extra:', extra.join(', '));\n        }\n    });\n\n    return allTestsPassed;\n};\n\n// Run tests if this file is executed directly\nif (import.meta.url === import.meta.resolve('./segmentCalculatorTests.js')) {\n    const passed = runSegmentCalculatorTests();\n    console.log(`\\n${'='.repeat(50)}`);\n    console.log(`Overall test status: ${passed ? '✓ PASSED' : '✗ FAILED'}`);\n    console.log('='.repeat(50));\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}