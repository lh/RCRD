{"ast":null,"code":"/**\n * @typedef {Object} ClockRange\n * @property {number} start\n * @property {number} end\n */\n\nclass ClockHourNotation {\n  /**\n   * Convert a segment number to its corresponding clock hour\n   * @param {number} segment - Segment number (0-59)\n   * @returns {number} Clock hour (1-12)\n   */\n  static getHourFromSegment(segment) {\n    const hour = Math.floor(segment / 5) + 1;\n    return hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\n  }\n\n  /**\n   * Check if any segments touch a given hour\n   * @param {number[]} segments - Array of segment numbers\n   * @param {number} hour - Clock hour to check\n   * @returns {boolean}\n   */\n  static segmentsTouchHour(segments, hour) {\n    if (hour === 12) {\n      return segments.some(s => s >= 55 || s <= 4);\n    }\n    const startSegment = (hour - 1) * 5 % 60;\n    const endSegment = (startSegment + 4) % 60;\n\n    // Handle wrapping around midnight\n    if (startSegment > endSegment) {\n      return segments.some(s => s >= startSegment || s <= endSegment);\n    }\n    return segments.some(s => s >= startSegment && s <= endSegment);\n  }\n\n  /**\n   * Build ranges from a set of hours\n   * @param {Set<number>} hours - Set of affected clock hours\n   * @returns {ClockRange[]}\n   */\n  static buildRanges(hours) {\n    const hourList = Array.from(hours).sort((a, b) => a - b);\n    const ranges = [];\n    if (hourList.length === 0) {\n      return ranges;\n    }\n    let currentRange = {\n      start: hourList[0],\n      end: hourList[0]\n    };\n    for (let i = 1; i < hourList.length; i++) {\n      const hour = hourList[i];\n      const prevHour = currentRange.end;\n      const isConsecutive = hour === prevHour + 1 || prevHour === 12 && hour === 1 || prevHour === 11 && hour === 12;\n      if (isConsecutive) {\n        currentRange.end = hour;\n      } else {\n        ranges.push(currentRange);\n        currentRange = {\n          start: hour,\n          end: hour\n        };\n      }\n    }\n    ranges.push(currentRange);\n    return ranges;\n  }\n\n  /**\n   * Merge ranges that should be combined\n   * @param {ClockRange[]} ranges - Array of clock hour ranges\n   * @returns {ClockRange[]}\n   */\n  static mergeRanges(ranges) {\n    if (ranges.length <= 1) return ranges;\n\n    // Check for midnight crossing ranges that should be merged\n    const firstRange = ranges[0];\n    const lastRange = ranges[ranges.length - 1];\n    if (lastRange.end === 11 && firstRange.start === 12) {\n      const merged = {\n        start: lastRange.start,\n        end: firstRange.end\n      };\n      return [merged, ...ranges.slice(1, -1)];\n    }\n    if (lastRange.end === 12 && firstRange.start === 1) {\n      const merged = {\n        start: lastRange.start,\n        end: firstRange.end\n      };\n      return [merged, ...ranges.slice(1, -1)];\n    }\n    return ranges;\n  }\n\n  /**\n   * Format clock hour notation for retinal detachment\n   * @param {number[]} segments - Array of affected segments\n   * @returns {string} Formatted clock hour notation\n   */\n  static formatDetachment(segments) {\n    if (!segments || segments.length === 0) {\n      return \"None\";\n    }\n    if (segments.length >= 55) {\n      return \"1-12 o'clock\";\n    }\n\n    // Get all affected hours\n    const hours = new Set();\n    for (let hour = 1; hour <= 12; hour++) {\n      if (this.segmentsTouchHour(segments, hour)) {\n        hours.add(hour);\n      }\n    }\n\n    // Special handling for hours 3, 6, and 9\n    if (segments.some(s => s >= 10 && s <= 14 || s >= 20 && s <= 24)) {\n      hours.add(3);\n    }\n    if (segments.some(s => s >= 40 && s <= 44 || s >= 50 && s <= 54)) {\n      hours.add(9);\n    }\n    if (hours.has(5) || hours.has(7)) {\n      hours.add(6);\n    }\n\n    // Build and merge ranges\n    const ranges = this.mergeRanges(this.buildRanges(hours));\n\n    // Format output\n    return ranges.map(range => `${range.start}-${range.end}`).join(\"; \") + \" o'clock\";\n  }\n}\n\n// Test cases\nClockHourNotation.SEGMENTS_PER_HOUR = 5;\nClockHourNotation.TOTAL_SEGMENTS = 60;\nif (typeof describe !== 'undefined') {\n  describe('ClockHourNotation', () => {\n    const testCases = [{\n      name: 'Empty segments',\n      segments: [],\n      expected: 'None'\n    }, {\n      name: 'Total detachment',\n      segments: Array.from({\n        length: 58\n      }, (_, i) => i),\n      expected: '1-12 o\\'clock'\n    }, {\n      name: 'Single hour',\n      segments: [0, 1, 2, 3, 4],\n      expected: '12-12 o\\'clock'\n    }, {\n      name: 'Midnight crossing simple',\n      segments: [53, 54, 55, 56, 57, 58, 59, 0, 1, 2],\n      expected: '11-1 o\\'clock'\n    }, {\n      name: 'Multiple ranges',\n      segments: [25, 26, 27, 28, 29, 30, 40, 41, 42],\n      expected: '6-6; 9-9 o\\'clock'\n    }, {\n      name: 'Hour 6 inclusion from 5',\n      segments: [20, 21, 22, 23, 24, 25],\n      expected: '5-6 o\\'clock'\n    }, {\n      name: 'Hour 6 inclusion from 7',\n      segments: [30, 31, 32, 33, 34],\n      expected: '6-7 o\\'clock'\n    }, {\n      name: 'Hour 3 inclusion from above',\n      segments: [10, 11, 12, 13, 14],\n      expected: '3-3 o\\'clock'\n    }, {\n      name: 'Hour 9 inclusion from above',\n      segments: [40, 41, 42, 43, 44],\n      expected: '9-9 o\\'clock'\n    }, {\n      name: 'Complex midnight crossing with multiple ranges',\n      segments: [...Array.from({\n        length: 5\n      }, (_, i) => i + 50),\n      // Hour 11\n      ...Array.from({\n        length: 5\n      }, (_, i) => i + 55),\n      // Hour 12\n      ...Array.from({\n        length: 5\n      }, (_, i) => i),\n      // Hour 1\n      ...Array.from({\n        length: 5\n      }, (_, i) => i + 25) // Hour 6\n      ],\n      expected: '11-1; 6-6 o\\'clock'\n    }, {\n      name: 'Special case from screenshot',\n      segments: [...Array.from({\n        length: 15\n      }, (_, i) => i + 40),\n      // Hours 9-11\n      ...Array.from({\n        length: 25\n      }, (_, i) => i + 10) // Hours 3-7\n      ],\n      expected: '9-12; 3-8 o\\'clock'\n    }];\n    testCases.forEach(({\n      name,\n      segments,\n      expected\n    }) => {\n      test(name, () => {\n        expect(ClockHourNotation.formatDetachment(segments)).toBe(expected);\n      });\n    });\n  });\n}\nexport { ClockHourNotation };","map":{"version":3,"names":["ClockHourNotation","getHourFromSegment","segment","hour","Math","floor","segmentsTouchHour","segments","some","s","startSegment","endSegment","buildRanges","hours","hourList","Array","from","sort","a","b","ranges","length","currentRange","start","end","i","prevHour","isConsecutive","push","mergeRanges","firstRange","lastRange","merged","slice","formatDetachment","Set","add","has","map","range","join","SEGMENTS_PER_HOUR","TOTAL_SEGMENTS","describe","testCases","name","expected","_","forEach","test","expect","toBe"],"sources":["/Users/rose/Code/RCRD/src/components/clock/utils/clockHourNotation.js"],"sourcesContent":["/**\n * @typedef {Object} ClockRange\n * @property {number} start\n * @property {number} end\n */\n\nclass ClockHourNotation {\n    static SEGMENTS_PER_HOUR = 5;\n    static TOTAL_SEGMENTS = 60;\n\n    /**\n     * Convert a segment number to its corresponding clock hour\n     * @param {number} segment - Segment number (0-59)\n     * @returns {number} Clock hour (1-12)\n     */\n    static getHourFromSegment(segment) {\n        const hour = Math.floor(segment / 5) + 1;\n        return hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\n    }\n\n    /**\n     * Check if any segments touch a given hour\n     * @param {number[]} segments - Array of segment numbers\n     * @param {number} hour - Clock hour to check\n     * @returns {boolean}\n     */\n    static segmentsTouchHour(segments, hour) {\n        if (hour === 12) {\n            return segments.some(s => s >= 55 || s <= 4);\n        }\n\n        const startSegment = ((hour - 1) * 5) % 60;\n        const endSegment = (startSegment + 4) % 60;\n\n        // Handle wrapping around midnight\n        if (startSegment > endSegment) {\n            return segments.some(s => s >= startSegment || s <= endSegment);\n        }\n        return segments.some(s => s >= startSegment && s <= endSegment);\n    }\n\n    /**\n     * Build ranges from a set of hours\n     * @param {Set<number>} hours - Set of affected clock hours\n     * @returns {ClockRange[]}\n     */\n    static buildRanges(hours) {\n        const hourList = Array.from(hours).sort((a, b) => a - b);\n        const ranges = [];\n\n        if (hourList.length === 0) {\n            return ranges;\n        }\n\n        let currentRange = { start: hourList[0], end: hourList[0] };\n\n        for (let i = 1; i < hourList.length; i++) {\n            const hour = hourList[i];\n            const prevHour = currentRange.end;\n            const isConsecutive = \n                hour === prevHour + 1 || \n                (prevHour === 12 && hour === 1) ||\n                (prevHour === 11 && hour === 12);\n\n            if (isConsecutive) {\n                currentRange.end = hour;\n            } else {\n                ranges.push(currentRange);\n                currentRange = { start: hour, end: hour };\n            }\n        }\n\n        ranges.push(currentRange);\n        return ranges;\n    }\n\n    /**\n     * Merge ranges that should be combined\n     * @param {ClockRange[]} ranges - Array of clock hour ranges\n     * @returns {ClockRange[]}\n     */\n    static mergeRanges(ranges) {\n        if (ranges.length <= 1) return ranges;\n\n        // Check for midnight crossing ranges that should be merged\n        const firstRange = ranges[0];\n        const lastRange = ranges[ranges.length - 1];\n\n        if (lastRange.end === 11 && firstRange.start === 12) {\n            const merged = { start: lastRange.start, end: firstRange.end };\n            return [merged, ...ranges.slice(1, -1)];\n        }\n\n        if (lastRange.end === 12 && firstRange.start === 1) {\n            const merged = { start: lastRange.start, end: firstRange.end };\n            return [merged, ...ranges.slice(1, -1)];\n        }\n\n        return ranges;\n    }\n\n    /**\n     * Format clock hour notation for retinal detachment\n     * @param {number[]} segments - Array of affected segments\n     * @returns {string} Formatted clock hour notation\n     */\n    static formatDetachment(segments) {\n        if (!segments || segments.length === 0) {\n            return \"None\";\n        }\n\n        if (segments.length >= 55) {\n            return \"1-12 o'clock\";\n        }\n\n        // Get all affected hours\n        const hours = new Set();\n        for (let hour = 1; hour <= 12; hour++) {\n            if (this.segmentsTouchHour(segments, hour)) {\n                hours.add(hour);\n            }\n        }\n\n        // Special handling for hours 3, 6, and 9\n        if (segments.some(s => (s >= 10 && s <= 14) || (s >= 20 && s <= 24))) {\n            hours.add(3);\n        }\n        if (segments.some(s => (s >= 40 && s <= 44) || (s >= 50 && s <= 54))) {\n            hours.add(9);\n        }\n        if (hours.has(5) || hours.has(7)) {\n            hours.add(6);\n        }\n\n        // Build and merge ranges\n        const ranges = this.mergeRanges(this.buildRanges(hours));\n\n        // Format output\n        return ranges\n            .map(range => `${range.start}-${range.end}`)\n            .join(\"; \") + \" o'clock\";\n    }\n}\n\n// Test cases\nif (typeof describe !== 'undefined') {\n    describe('ClockHourNotation', () => {\n        const testCases = [\n            {\n                name: 'Empty segments',\n                segments: [],\n                expected: 'None'\n            },\n            {\n                name: 'Total detachment',\n                segments: Array.from({ length: 58 }, (_, i) => i),\n                expected: '1-12 o\\'clock'\n            },\n            {\n                name: 'Single hour',\n                segments: [0, 1, 2, 3, 4],\n                expected: '12-12 o\\'clock'\n            },\n            {\n                name: 'Midnight crossing simple',\n                segments: [53, 54, 55, 56, 57, 58, 59, 0, 1, 2],\n                expected: '11-1 o\\'clock'\n            },\n            {\n                name: 'Multiple ranges',\n                segments: [25, 26, 27, 28, 29, 30, 40, 41, 42],\n                expected: '6-6; 9-9 o\\'clock'\n            },\n            {\n                name: 'Hour 6 inclusion from 5',\n                segments: [20, 21, 22, 23, 24, 25],\n                expected: '5-6 o\\'clock'\n            },\n            {\n                name: 'Hour 6 inclusion from 7',\n                segments: [30, 31, 32, 33, 34],\n                expected: '6-7 o\\'clock'\n            },\n            {\n                name: 'Hour 3 inclusion from above',\n                segments: [10, 11, 12, 13, 14],\n                expected: '3-3 o\\'clock'\n            },\n            {\n                name: 'Hour 9 inclusion from above',\n                segments: [40, 41, 42, 43, 44],\n                expected: '9-9 o\\'clock'\n            },\n            {\n                name: 'Complex midnight crossing with multiple ranges',\n                segments: [\n                    ...Array.from({ length: 5 }, (_, i) => i + 50), // Hour 11\n                    ...Array.from({ length: 5 }, (_, i) => i + 55), // Hour 12\n                    ...Array.from({ length: 5 }, (_, i) => i),      // Hour 1\n                    ...Array.from({ length: 5 }, (_, i) => i + 25), // Hour 6\n                ],\n                expected: '11-1; 6-6 o\\'clock'\n            },\n            {\n                name: 'Special case from screenshot',\n                segments: [\n                    ...Array.from({ length: 15 }, (_, i) => i + 40), // Hours 9-11\n                    ...Array.from({ length: 25 }, (_, i) => i + 10)  // Hours 3-7\n                ],\n                expected: '9-12; 3-8 o\\'clock'\n            }\n        ];\n\n        testCases.forEach(({ name, segments, expected }) => {\n            test(name, () => {\n                expect(ClockHourNotation.formatDetachment(segments)).toBe(expected);\n            });\n        });\n    });\n}\n\nexport { ClockHourNotation };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}