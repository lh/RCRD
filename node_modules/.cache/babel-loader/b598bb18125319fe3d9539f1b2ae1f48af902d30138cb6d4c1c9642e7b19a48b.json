{"ast":null,"code":"var _jsxFileName = \"/Users/rose/Code/RCRD/src/components/clock/ClockFace.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\nimport { interpolateSegments } from './utils/interpolateSegments.js';\nimport { calculateSegmentsForHourRange } from '../../tests/clockFace/segmentCalculatorTests.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClockFace = ({\n  selectedHours,\n  detachmentSegments,\n  hoveredHour,\n  onHoverChange,\n  onTearToggle,\n  onSegmentToggle,\n  setDetachmentSegments,\n  onTouchDeviceChange,\n  readOnly = false\n}) => {\n  _s();\n  // Constants\n  const outerRadius = 110;\n  const innerRadius = 60;\n  const mobileInnerRadius = 40;\n  const middleRadius = Math.floor((outerRadius + innerRadius) / 2);\n  const tearRadius = middleRadius + 14;\n  const tearHitRadius = 20;\n  const indicatorExtension = 1;\n  const LONG_PRESS_DURATION = 500; // ms\n\n  // State\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lastPosition, setLastPosition] = useState(null);\n  const [isTouchDevice, setIsTouchDevice] = useState(false);\n  const [touchStartTime, setTouchStartTime] = useState(null);\n  const [touchStartPosition, setTouchStartPosition] = useState(null);\n  const svgRef = useRef(null);\n\n  // Code for debugging\n  useEffect(() => {\n    window.performance.mark('segments-update');\n    console.warn('Current detachment segments:', detachmentSegments);\n    console.warn('Is touch device:', isTouchDevice);\n  }, [detachmentSegments, isTouchDevice]);\n\n  // Detect touch device\n  useEffect(() => {\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    const touchEnabled = isMobile && ('ontouchstart' in window || navigator.maxTouchPoints > 0);\n    setIsTouchDevice(touchEnabled);\n    onTouchDeviceChange === null || onTouchDeviceChange === void 0 ? void 0 : onTouchDeviceChange(touchEnabled); // Notify parent\n  }, [onTouchDeviceChange]);\n  const segmentCount = isTouchDevice ? 12 : 60;\n\n  // Utility functions\n  const polarToCartesian = (angle, r) => {\n    const radian = (angle - 90) * (Math.PI / 180);\n    return {\n      x: r * Math.cos(radian),\n      y: r * Math.sin(radian)\n    };\n  };\n  const cartesianToPolar = (x, y) => {\n    const angle = Math.atan2(y, x) * (180 / Math.PI);\n    return (90 - angle + 360) % 360;\n  };\n  const degreeToSegment = degree => {\n    return Math.floor(degree / 6) % 60;\n  };\n  const segmentToDegree = segment => {\n    return segment * 6 % 360;\n  };\n\n  // Style constants\n  const styles = {\n    transition: 'fill 0.2s ease, stroke 0.2s ease',\n    tear: {\n      default: {\n        fill: '#dc2626',\n        stroke: '#dc2626',\n        strokeWidth: '0.5'\n      },\n      hover: {\n        fill: '#b91c1c',\n        stroke: '#b91c1c',\n        strokeWidth: '0.5'\n      }\n    },\n    circle: {\n      default: {\n        fill: 'white',\n        stroke: '#d1d5db',\n        strokeWidth: '1.5'\n      },\n      hover: {\n        fill: '#fee2e2',\n        stroke: '#d1d5db',\n        strokeWidth: '1.5'\n      }\n    }\n  };\n  const getStyles = (hour, hoveredHour, isSelected) => {\n    const isHovered = hoveredHour === hour;\n    if (isSelected) {\n      return {\n        ...styles.tear.default,\n        ...(isHovered && !readOnly ? styles.tear.hover : {}),\n        transition: styles.transition\n      };\n    }\n    return {\n      ...styles.circle.default,\n      ...(isHovered && !readOnly ? styles.circle.hover : {}),\n      transition: styles.transition\n    };\n  };\n  const createTearPath = (x, y, angle) => {\n    const tearPath = `\n        M -4 -8\n        c -0.091 -0.936 0.333 -1.232 0.777 0.658\n        c 0.389 1.655 1.060 3.281 1.060 3.281\n        s 0 0.254 1.022 0.617\n        c 0.793 0.282 2.183 -2.882 2.183 -2.882\n        s 1.953 -4.433 1.437 -1.294\n        c -1.217 7.410 -1.640 6.716 -1.664 6.897\n        c -0.024 0.181 -0.510 0.596 -0.510 0.596\n        s -0.178 0.183 -0.585 0.327\n        c -3.121 1.110 -3.163 -3.001 -3.163 -3.001\n        L -4 -8\n      `;\n    return {\n      d: tearPath,\n      transform: `translate(${x}, ${y}) scale(1.5) rotate(${angle})`\n    };\n  };\n  const getPosition = (hour, radius) => {\n    const angle = hour * 30;\n    const point = polarToCartesian(angle, radius);\n    return {\n      ...point,\n      angle\n    };\n  };\n  const getSegmentFromPoint = useCallback((clientX, clientY) => {\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const centerX = svgRect.left + svgRect.width / 2;\n    const centerY = svgRef.current.getBoundingClientRect().top + svgRect.height / 2;\n    const relX = clientX - centerX;\n    const relY = -(clientY - centerY);\n    const angle = cartesianToPolar(relX, relY);\n    const segment = degreeToSegment(angle);\n    if (isTouchDevice) {\n      const snappedSegment = Math.round(segment / (60 / 12)) * (60 / 12);\n      return snappedSegment % 60;\n    }\n    return segment;\n  }, [isTouchDevice]);\n\n  // Touch event handlers for tears\n  const handleTouchStart = useCallback(hour => e => {\n    if (readOnly) return;\n    e.preventDefault();\n    e.stopPropagation();\n    const touch = e.touches[0];\n    setTouchStartTime(Date.now());\n    setTouchStartPosition({\n      x: touch.clientX,\n      y: touch.clientY\n    });\n    return false;\n  }, [readOnly]);\n  const handleTouchEnd = useCallback(hour => e => {\n    if (readOnly) return;\n    e.preventDefault();\n    e.stopPropagation();\n    if (!touchStartTime || !touchStartPosition) return;\n    const touchEndTime = Date.now();\n    const pressDuration = touchEndTime - touchStartTime;\n\n    // Only toggle if it was a long press and the finger didn't move much\n    if (pressDuration >= LONG_PRESS_DURATION) {\n      onTearToggle(hour);\n    }\n    setTouchStartTime(null);\n    setTouchStartPosition(null);\n    return false;\n  }, [readOnly, touchStartTime, touchStartPosition, onTearToggle]);\n  const handleDrawingStart = useCallback(e => {\n    var _e$touches;\n    if (readOnly) return;\n    e.preventDefault();\n    const touch = ((_e$touches = e.touches) === null || _e$touches === void 0 ? void 0 : _e$touches[0]) || e;\n    const segment = getSegmentFromPoint(touch.clientX, touch.clientY);\n    if (segment !== null) {\n      setIsDrawing(true);\n      setLastPosition(segment);\n      if (isTouchDevice) {\n        const currentSegments = detachmentSegments.includes(segment) ? detachmentSegments.filter(s => s !== segment) : [...detachmentSegments, segment];\n        const interpolated = interpolateSegments(currentSegments);\n\n        // Instead of toggling individual segments, update all at once\n        setDetachmentSegments(interpolated);\n      } else {\n        onSegmentToggle(segment);\n      }\n    }\n  }, [getSegmentFromPoint, onSegmentToggle, readOnly, isTouchDevice, detachmentSegments, setDetachmentSegments]);\n  const handleDrawing = useCallback(e => {\n    var _e$touches2;\n    if (!isDrawing || readOnly) return;\n    e.preventDefault();\n    const touch = ((_e$touches2 = e.touches) === null || _e$touches2 === void 0 ? void 0 : _e$touches2[0]) || e;\n    const currentSegment = getSegmentFromPoint(touch.clientX, touch.clientY);\n    if (currentSegment !== null && currentSegment !== lastPosition) {\n      const debugEl = document.getElementById('touch-debug');\n      if (isTouchDevice) {\n        // Calculate start and end hours\n        const startHour = Math.floor(detachmentSegments[0] / 5) + 1;\n        const touchHour = Math.floor(currentSegment / 5) + 1;\n\n        // Get all segments for the hour range\n        const segmentsToAdd = calculateSegmentsForHourRange(startHour, touchHour);\n        if (debugEl) {\n          debugEl.textContent = JSON.stringify({\n            touchPosition: currentSegment,\n            startHour,\n            endHour: touchHour,\n            segmentsNeeded: segmentsToAdd,\n            currentTotal: detachmentSegments.length\n          }, null, 2);\n        }\n\n        // Combine existing and new segments, deduplicate\n        const newSegments = [...new Set([...detachmentSegments, ...segmentsToAdd])];\n        const interpolated = interpolateSegments(newSegments);\n        setDetachmentSegments(interpolated);\n      } else {\n        onSegmentToggle(currentSegment);\n      }\n      setLastPosition(currentSegment);\n    }\n  }, [isDrawing, lastPosition, getSegmentFromPoint, onSegmentToggle, readOnly, isTouchDevice, detachmentSegments, setDetachmentSegments]);\n  const handleDrawingEnd = useCallback(e => {\n    if (!isDrawing || readOnly) return;\n    e.preventDefault();\n    setIsDrawing(false);\n    setLastPosition(null);\n  }, [isDrawing, readOnly]);\n  const effectiveInnerRadius = isTouchDevice ? mobileInnerRadius : innerRadius;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center w-full\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `relative touch-none select-none ${readOnly ? 'pointer-events-none' : ''}`,\n      style: {\n        width: readOnly ? \"200px\" : \"min(80vw, min(80vh, 500px))\",\n        aspectRatio: \"1\",\n        minWidth: readOnly ? \"200px\" : \"200px\",\n        maxWidth: readOnly ? \"200px\" : \"500px\",\n        margin: \"0 auto\"\n      },\n      onContextMenu: e => e.preventDefault(),\n      \"data-clockface\": true,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        viewBox: \"-110 -110 220 220\",\n        className: \"w-full h-full\",\n        preserveAspectRatio: \"xMidYMid meet\",\n        onMouseDown: !isTouchDevice ? handleDrawingStart : undefined,\n        onMouseMove: !isTouchDevice ? handleDrawing : undefined,\n        onMouseUp: !isTouchDevice ? handleDrawingEnd : undefined,\n        onMouseLeave: !isTouchDevice ? handleDrawingEnd : undefined,\n        onTouchStart: isTouchDevice ? handleDrawingStart : undefined,\n        onTouchMove: isTouchDevice ? handleDrawing : undefined,\n        onTouchEnd: isTouchDevice ? handleDrawingEnd : undefined,\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"pointer-events-none\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"0\",\n            cy: \"0\",\n            r: outerRadius,\n            fill: \"none\",\n            stroke: \"#e5e5e5\",\n            strokeWidth: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"0\",\n            cy: \"0\",\n            r: middleRadius,\n            fill: \"none\",\n            stroke: \"#e5e5e5\",\n            strokeWidth: \"0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"0\",\n            cy: \"0\",\n            r: effectiveInnerRadius,\n            fill: \"none\",\n            stroke: \"#e5e5e5\",\n            strokeWidth: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"pointer-events-auto\",\n          style: {\n            isolation: 'isolate'\n          },\n          children: [...Array(segmentCount)].map((_, i) => {\n            const logicalSegmentStart = Math.floor(i * (60 / segmentCount));\n            const logicalSegmentEnd = Math.floor((i + 1) * (60 / segmentCount));\n            const isHighlighted = detachmentSegments.some(segment => segment >= logicalSegmentStart && segment < logicalSegmentEnd);\n            const degreeStart = segmentToDegree(logicalSegmentStart);\n            const degreeEnd = segmentToDegree(logicalSegmentEnd);\n            const posStart = polarToCartesian(degreeStart, effectiveInnerRadius);\n            const posOuterStart = polarToCartesian(degreeStart, outerRadius);\n            const posEnd = polarToCartesian(degreeEnd, effectiveInnerRadius);\n            const posOuterEnd = polarToCartesian(degreeEnd, outerRadius);\n            return /*#__PURE__*/_jsxDEV(\"path\", {\n              d: `M ${posStart.x} ${posStart.y} \n      L ${posOuterStart.x} ${posOuterStart.y} \n      A ${outerRadius} ${outerRadius} 0 0 1 ${posOuterEnd.x} ${posOuterEnd.y}\n      L ${posEnd.x} ${posEnd.y}\n      A ${effectiveInnerRadius} ${effectiveInnerRadius} 0 0 0 ${posStart.x} ${posStart.y}`,\n              fill: isHighlighted ? \"rgba(59, 130, 246, 0.5)\" : \"transparent\",\n              className: `cursor-pointer hover:fill-blue-200 transition-colors ${readOnly ? '' : 'pointer-events-auto'}`,\n              style: {\n                pointerEvents: readOnly ? 'none' : 'auto'\n              }\n            }, `segment-${i}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"pointer-events-auto\",\n          style: {\n            isolation: 'isolate'\n          },\n          children: [...Array(12)].map((_, i) => {\n            const hour = i === 0 ? 12 : i;\n            const visualPos = getPosition(hour, tearRadius);\n            const isSelected = selectedHours.includes(hour);\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              onClick: !isTouchDevice && !readOnly ? e => {\n                e.preventDefault();\n                e.stopPropagation();\n                onTearToggle(hour);\n                return false;\n              } : undefined,\n              onTouchStart: isTouchDevice && !readOnly ? handleTouchStart(hour) : undefined,\n              onTouchEnd: isTouchDevice && !readOnly ? handleTouchEnd(hour) : undefined,\n              onMouseEnter: !readOnly ? () => onHoverChange(hour) : undefined,\n              onMouseLeave: !readOnly ? () => onHoverChange(null) : undefined,\n              style: {\n                cursor: readOnly ? 'default' : 'pointer'\n              },\n              children: [!readOnly && /*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: visualPos.x,\n                cy: visualPos.y,\n                r: tearHitRadius,\n                fill: \"transparent\",\n                className: \"pointer-events-auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 21\n              }, this), isSelected ? /*#__PURE__*/_jsxDEV(\"path\", {\n                ...createTearPath(visualPos.x, visualPos.y, visualPos.angle),\n                style: {\n                  ...getStyles(hour, hoveredHour, true),\n                  zIndex: 10\n                },\n                onMouseDown: e => e.stopPropagation()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: visualPos.x,\n                cy: visualPos.y,\n                r: \"12\",\n                style: {\n                  ...getStyles(hour, hoveredHour, false),\n                  pointerEvents: 'all',\n                  zIndex: 10\n                },\n                onMouseDown: e => e.stopPropagation()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 21\n              }, this)]\n            }, `tear-${hour}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          className: \"pointer-events-none\",\n          x1: \"0\",\n          y1: -outerRadius,\n          x2: \"0\",\n          y2: -(outerRadius + indicatorExtension),\n          stroke: \"#666\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s(ClockFace, \"x7zdNmiLjrrttAD0v2eoP8dG6S0=\");\n_c = ClockFace;\nexport default ClockFace;\nvar _c;\n$RefreshReg$(_c, \"ClockFace\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useEffect","interpolateSegments","calculateSegmentsForHourRange","jsxDEV","_jsxDEV","ClockFace","selectedHours","detachmentSegments","hoveredHour","onHoverChange","onTearToggle","onSegmentToggle","setDetachmentSegments","onTouchDeviceChange","readOnly","_s","outerRadius","innerRadius","mobileInnerRadius","middleRadius","Math","floor","tearRadius","tearHitRadius","indicatorExtension","LONG_PRESS_DURATION","isDrawing","setIsDrawing","lastPosition","setLastPosition","isTouchDevice","setIsTouchDevice","touchStartTime","setTouchStartTime","touchStartPosition","setTouchStartPosition","svgRef","window","performance","mark","console","warn","isMobile","test","navigator","userAgent","touchEnabled","maxTouchPoints","segmentCount","polarToCartesian","angle","r","radian","PI","x","cos","y","sin","cartesianToPolar","atan2","degreeToSegment","degree","segmentToDegree","segment","styles","transition","tear","default","fill","stroke","strokeWidth","hover","circle","getStyles","hour","isSelected","isHovered","createTearPath","tearPath","d","transform","getPosition","radius","point","getSegmentFromPoint","clientX","clientY","svgRect","current","getBoundingClientRect","centerX","left","width","centerY","top","height","relX","relY","snappedSegment","round","handleTouchStart","e","preventDefault","stopPropagation","touch","touches","Date","now","handleTouchEnd","touchEndTime","pressDuration","handleDrawingStart","_e$touches","currentSegments","includes","filter","s","interpolated","handleDrawing","_e$touches2","currentSegment","debugEl","document","getElementById","startHour","touchHour","segmentsToAdd","textContent","JSON","stringify","touchPosition","endHour","segmentsNeeded","currentTotal","length","newSegments","Set","handleDrawingEnd","effectiveInnerRadius","className","children","style","aspectRatio","minWidth","maxWidth","margin","onContextMenu","ref","viewBox","preserveAspectRatio","onMouseDown","undefined","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","cx","cy","fileName","_jsxFileName","lineNumber","columnNumber","isolation","Array","map","_","i","logicalSegmentStart","logicalSegmentEnd","isHighlighted","some","degreeStart","degreeEnd","posStart","posOuterStart","posEnd","posOuterEnd","pointerEvents","visualPos","onClick","onMouseEnter","cursor","zIndex","x1","y1","x2","y2","_c","$RefreshReg$"],"sources":["/Users/rose/Code/RCRD/src/components/clock/ClockFace.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect } from \"react\";\nimport { interpolateSegments } from './utils/interpolateSegments.js';  \nimport { calculateSegmentsForHourRange } from '../../tests/clockFace/segmentCalculatorTests.js';\n\nconst ClockFace = ({\n  selectedHours,\n  detachmentSegments,\n  hoveredHour,\n  onHoverChange,\n  onTearToggle,\n  onSegmentToggle,\n  setDetachmentSegments, \n  onTouchDeviceChange,\n  readOnly = false\n}) => {\n  // Constants\n  const outerRadius = 110;\n  const innerRadius = 60;\n  const mobileInnerRadius = 40;\n  const middleRadius = Math.floor((outerRadius + innerRadius) / 2);\n  const tearRadius = middleRadius + 14;\n  const tearHitRadius = 20;\n  const indicatorExtension = 1;\n  const LONG_PRESS_DURATION = 500; // ms\n\n  // State\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lastPosition, setLastPosition] = useState(null);\n  const [isTouchDevice, setIsTouchDevice] = useState(false);\n  const [touchStartTime, setTouchStartTime] = useState(null);\n  const [touchStartPosition, setTouchStartPosition] = useState(null);\n  const svgRef = useRef(null);\n\n// Code for debugging\nuseEffect(() => {\n  window.performance.mark('segments-update');\n  console.warn('Current detachment segments:', detachmentSegments);\n  console.warn('Is touch device:', isTouchDevice);\n}, [detachmentSegments, isTouchDevice]);\n\n\n  // Detect touch device\n  useEffect(() => {\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    const touchEnabled = isMobile && ('ontouchstart' in window || navigator.maxTouchPoints > 0);\n    setIsTouchDevice(touchEnabled);\n    onTouchDeviceChange?.(touchEnabled); // Notify parent\n}, [onTouchDeviceChange]);\n\n  const segmentCount = isTouchDevice ? 12 : 60;\n\n  // Utility functions\n  const polarToCartesian = (angle, r) => {\n    const radian = (angle - 90) * (Math.PI / 180);\n    return {\n      x: r * Math.cos(radian),\n      y: r * Math.sin(radian)\n    };\n  };\n\n  const cartesianToPolar = (x, y) => {\n    const angle = Math.atan2(y, x) * (180 / Math.PI);\n    return (90 - angle + 360) % 360;\n  };\n\n  const degreeToSegment = (degree) => {\n    return Math.floor(degree / 6) % 60;\n  };\n\n  const segmentToDegree = (segment) => {\n    return (segment * 6) % 360;\n  };\n\n  // Style constants\n  const styles = {\n    transition: 'fill 0.2s ease, stroke 0.2s ease',\n    tear: {\n      default: {\n        fill: '#dc2626',\n        stroke: '#dc2626',\n        strokeWidth: '0.5'\n      },\n      hover: {\n        fill: '#b91c1c',\n        stroke: '#b91c1c',\n        strokeWidth: '0.5'\n      }\n    },\n    circle: {\n      default: {\n        fill: 'white',\n        stroke: '#d1d5db',\n        strokeWidth: '1.5'\n      },\n      hover: {\n        fill: '#fee2e2',\n        stroke: '#d1d5db',\n        strokeWidth: '1.5'\n      }\n    }\n  };\n\n  const getStyles = (hour, hoveredHour, isSelected) => {\n    const isHovered = hoveredHour === hour;\n    if (isSelected) {\n      return {\n        ...styles.tear.default,\n        ...(isHovered && !readOnly ? styles.tear.hover : {}),\n        transition: styles.transition\n      };\n    }\n    return {\n      ...styles.circle.default,\n      ...(isHovered && !readOnly ? styles.circle.hover : {}),\n      transition: styles.transition\n    };\n  };\n\n  const createTearPath = (x, y, angle) => {\n    const tearPath = `\n        M -4 -8\n        c -0.091 -0.936 0.333 -1.232 0.777 0.658\n        c 0.389 1.655 1.060 3.281 1.060 3.281\n        s 0 0.254 1.022 0.617\n        c 0.793 0.282 2.183 -2.882 2.183 -2.882\n        s 1.953 -4.433 1.437 -1.294\n        c -1.217 7.410 -1.640 6.716 -1.664 6.897\n        c -0.024 0.181 -0.510 0.596 -0.510 0.596\n        s -0.178 0.183 -0.585 0.327\n        c -3.121 1.110 -3.163 -3.001 -3.163 -3.001\n        L -4 -8\n      `;\n    return {\n      d: tearPath,\n      transform: `translate(${x}, ${y}) scale(1.5) rotate(${angle})`\n    };\n  };\n\n  const getPosition = (hour, radius) => {\n    const angle = hour * 30;\n    const point = polarToCartesian(angle, radius);\n    return {\n      ...point,\n      angle\n    };\n  };\n\n \n\n  const getSegmentFromPoint = useCallback((clientX, clientY) => {\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const centerX = svgRect.left + svgRect.width / 2;\n    const centerY = svgRef.current.getBoundingClientRect().top + svgRect.height / 2;\n    const relX = clientX - centerX;\n    const relY = -(clientY - centerY);\n    const angle = cartesianToPolar(relX, relY);\n    const segment = degreeToSegment(angle);\n\n    if (isTouchDevice) {\n      const snappedSegment = Math.round(segment / (60 / 12)) * (60 / 12);\n      return snappedSegment % 60;\n    }\n\n    return segment;\n  }, [isTouchDevice]);\n\n  // Touch event handlers for tears\n  const handleTouchStart = useCallback((hour) => (e) => {\n    if (readOnly) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n\n    const touch = e.touches[0];\n    setTouchStartTime(Date.now());\n    setTouchStartPosition({ x: touch.clientX, y: touch.clientY });\n    return false;\n  }, [readOnly]);\n\n  const handleTouchEnd = useCallback((hour) => (e) => {\n    if (readOnly) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n\n    if (!touchStartTime || !touchStartPosition) return;\n\n    const touchEndTime = Date.now();\n    const pressDuration = touchEndTime - touchStartTime;\n\n    // Only toggle if it was a long press and the finger didn't move much\n    if (pressDuration >= LONG_PRESS_DURATION) {\n      onTearToggle(hour);\n    }\n\n    setTouchStartTime(null);\n    setTouchStartPosition(null);\n    return false;\n  }, [readOnly, touchStartTime, touchStartPosition, onTearToggle]);\n\n  const handleDrawingStart = useCallback((e) => {\n    if (readOnly) return;\n    e.preventDefault();\n\n    const touch = e.touches?.[0] || e;\n    const segment = getSegmentFromPoint(touch.clientX, touch.clientY);\n    \n    if (segment !== null) {\n        setIsDrawing(true);\n        setLastPosition(segment);\n        \n        if (isTouchDevice) {\n            const currentSegments = detachmentSegments.includes(segment) \n                ? detachmentSegments.filter(s => s !== segment)\n                : [...detachmentSegments, segment];\n            const interpolated = interpolateSegments(currentSegments);\n            \n            // Instead of toggling individual segments, update all at once\n            setDetachmentSegments(interpolated);\n        } else {\n            onSegmentToggle(segment);\n        }\n    }\n}, [getSegmentFromPoint, onSegmentToggle, readOnly, isTouchDevice, detachmentSegments, setDetachmentSegments]);\n\nconst handleDrawing = useCallback((e) => {\n  if (!isDrawing || readOnly) return;\n  e.preventDefault();\n\n  const touch = e.touches?.[0] || e;\n  const currentSegment = getSegmentFromPoint(touch.clientX, touch.clientY);\n  \n  if (currentSegment !== null && currentSegment !== lastPosition) {\n      const debugEl = document.getElementById('touch-debug');\n      \n      if (isTouchDevice) {\n          // Calculate start and end hours\n          const startHour = Math.floor(detachmentSegments[0] / 5) + 1;\n          const touchHour = Math.floor(currentSegment / 5) + 1;\n          \n          // Get all segments for the hour range\n          const segmentsToAdd = calculateSegmentsForHourRange(startHour, touchHour);\n\n          if (debugEl) {\n              debugEl.textContent = JSON.stringify({\n                  touchPosition: currentSegment,\n                  startHour,\n                  endHour: touchHour,\n                  segmentsNeeded: segmentsToAdd,\n                  currentTotal: detachmentSegments.length\n              }, null, 2);\n          }\n          \n          // Combine existing and new segments, deduplicate\n          const newSegments = [...new Set([...detachmentSegments, ...segmentsToAdd])];\n          const interpolated = interpolateSegments(newSegments);\n          \n          setDetachmentSegments(interpolated);\n      } else {\n          onSegmentToggle(currentSegment);\n      }\n      setLastPosition(currentSegment);\n  }\n}, [isDrawing, lastPosition, getSegmentFromPoint, onSegmentToggle, readOnly, isTouchDevice, detachmentSegments, setDetachmentSegments]);\n\n  const handleDrawingEnd = useCallback((e) => {\n    if (!isDrawing || readOnly) return;\n    e.preventDefault();\n    setIsDrawing(false);\n    setLastPosition(null);\n  }, [isDrawing, readOnly]);\n\n  const effectiveInnerRadius = isTouchDevice ? mobileInnerRadius : innerRadius;\n\n  return (\n    <div className=\"flex justify-center items-center w-full\">\n      <div\n        className={`relative touch-none select-none ${readOnly ? 'pointer-events-none' : ''}`}\n        style={{\n          width: readOnly ? \"200px\" : \"min(80vw, min(80vh, 500px))\",\n          aspectRatio: \"1\",\n          minWidth: readOnly ? \"200px\" : \"200px\",\n          maxWidth: readOnly ? \"200px\" : \"500px\",\n          margin: \"0 auto\"\n        }}\n        onContextMenu={(e) => e.preventDefault()}\n        data-clockface \n      >\n        <svg\n          ref={svgRef}\n          viewBox=\"-110 -110 220 220\"\n          className=\"w-full h-full\"\n          preserveAspectRatio=\"xMidYMid meet\"\n          onMouseDown={!isTouchDevice ? handleDrawingStart : undefined}\n          onMouseMove={!isTouchDevice ? handleDrawing : undefined}\n          onMouseUp={!isTouchDevice ? handleDrawingEnd : undefined}\n          onMouseLeave={!isTouchDevice ? handleDrawingEnd : undefined}\n          onTouchStart={isTouchDevice ? handleDrawingStart : undefined}\n          onTouchMove={isTouchDevice ? handleDrawing : undefined}\n          onTouchEnd={isTouchDevice ? handleDrawingEnd : undefined}\n        >\n          {/* Background and grid circles */}\n          <g className=\"pointer-events-none\">\n            <circle cx=\"0\" cy=\"0\" r={outerRadius} fill=\"none\" stroke=\"#e5e5e5\" strokeWidth=\"1\" />\n            <circle cx=\"0\" cy=\"0\" r={middleRadius} fill=\"none\" stroke=\"#e5e5e5\" strokeWidth=\"0.5\" />\n            <circle cx=\"0\" cy=\"0\" r={effectiveInnerRadius} fill=\"none\" stroke=\"#e5e5e5\" strokeWidth=\"1\" />\n          </g>\n\n          {/* Detachment segments layer */}\n          <g className=\"pointer-events-auto\" style={{ isolation: 'isolate' }}>\n            {[...Array(segmentCount)].map((_, i) => {\n              const logicalSegmentStart = Math.floor(i * (60 / segmentCount));\n              const logicalSegmentEnd = Math.floor((i + 1) * (60 / segmentCount));\n\n              const isHighlighted = detachmentSegments.some(\n                (segment) => segment >= logicalSegmentStart && segment < logicalSegmentEnd\n              );\n\n              const degreeStart = segmentToDegree(logicalSegmentStart);\n              const degreeEnd = segmentToDegree(logicalSegmentEnd);\n              const posStart = polarToCartesian(degreeStart, effectiveInnerRadius);\n              const posOuterStart = polarToCartesian(degreeStart, outerRadius);\n              const posEnd = polarToCartesian(degreeEnd, effectiveInnerRadius);\n              const posOuterEnd = polarToCartesian(degreeEnd, outerRadius);\n\n              return (\n                <path\n                  key={`segment-${i}`}\n                  d={`M ${posStart.x} ${posStart.y} \n      L ${posOuterStart.x} ${posOuterStart.y} \n      A ${outerRadius} ${outerRadius} 0 0 1 ${posOuterEnd.x} ${posOuterEnd.y}\n      L ${posEnd.x} ${posEnd.y}\n      A ${effectiveInnerRadius} ${effectiveInnerRadius} 0 0 0 ${posStart.x} ${posStart.y}`}\n                  fill={isHighlighted ? \"rgba(59, 130, 246, 0.5)\" : \"transparent\"}\n                  className={`cursor-pointer hover:fill-blue-200 transition-colors ${readOnly ? '' : 'pointer-events-auto'}`}\n                  style={{ pointerEvents: readOnly ? 'none' : 'auto' }}\n                />\n              );\n            })}\n          </g>\n\n          {/* Tear markers layer */}\n          <g className=\"pointer-events-auto\" style={{ isolation: 'isolate' }}>\n            {[...Array(12)].map((_, i) => {\n              const hour = i === 0 ? 12 : i;\n              const visualPos = getPosition(hour, tearRadius);\n              const isSelected = selectedHours.includes(hour);\n\n              return (\n                <g\n                  key={`tear-${hour}`}\n                  onClick={!isTouchDevice && !readOnly ? (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    onTearToggle(hour);\n                    return false;\n                  } : undefined}\n                  onTouchStart={isTouchDevice && !readOnly ? handleTouchStart(hour) : undefined}\n                  onTouchEnd={isTouchDevice && !readOnly ? handleTouchEnd(hour) : undefined}\n                  onMouseEnter={!readOnly ? () => onHoverChange(hour) : undefined}\n                  onMouseLeave={!readOnly ? () => onHoverChange(null) : undefined}\n                  style={{\n                    cursor: readOnly ? 'default' : 'pointer'\n                  }}\n                >\n                  {/* Invisible larger hit area for all devices */}\n                  {!readOnly && (\n                    <circle\n                      cx={visualPos.x}\n                      cy={visualPos.y}\n                      r={tearHitRadius}\n                      fill=\"transparent\"\n                      className=\"pointer-events-auto\"\n                    />\n                  )}\n\n                  {isSelected ? (\n                    <path\n                      {...createTearPath(visualPos.x, visualPos.y, visualPos.angle)}\n                      style={{\n                        ...getStyles(hour, hoveredHour, true),\n                        zIndex: 10\n                      }}\n                      onMouseDown={(e) => e.stopPropagation()}\n                    />\n                  ) : (\n                    <circle\n                      cx={visualPos.x}\n                      cy={visualPos.y}\n                      r=\"12\"\n                      style={{\n                        ...getStyles(hour, hoveredHour, false),\n                        pointerEvents: 'all',\n                        zIndex: 10\n                      }}\n                      onMouseDown={(e) => e.stopPropagation()}\n                    />\n                  )}\n                </g>\n              );\n            })}\n          </g>\n\n          {/* 12 o'clock indicator */}\n          <line\n            className=\"pointer-events-none\"\n            x1=\"0\"\n            y1={-outerRadius}\n            x2=\"0\"\n            y2={-(outerRadius + indicatorExtension)}\n            stroke=\"#666\"\n            strokeWidth=\"2\"\n          />\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default ClockFace;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}