{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport { segmentToHour } from '../utils/clockCalculations';\nexport const useClockInteractions = onChange => {\n  _s();\n  const [selectedHours, setSelectedHours] = useState([]);\n  const [detachmentSegments, setDetachmentSegments] = useState([]);\n  const [hoveredHour, setHoveredHour] = useState(null);\n  const [isAddMode, setIsAddMode] = useState(true);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isTouchDevice, setIsTouchDevice] = useState(false);\n  const [pressTimer, setPressTimer] = useState(null);\n  const drawingRef = useRef(false);\n  const touchStartTime = useRef(null);\n  const touchStartPosition = useRef(null);\n  const longPressThreshold = 300;\n  const moveThreshold = 10;\n  useEffect(() => {\n    setIsTouchDevice('ontouchstart' in window || navigator.maxTouchPoints > 0);\n  }, []);\n  const handleTearTouchMove = event => {\n    if (touchStartPosition.current) {\n      const moveX = Math.abs(event.touches[0].clientX - touchStartPosition.current.x);\n      const moveY = Math.abs(event.touches[0].clientY - touchStartPosition.current.y);\n      if (moveX > moveThreshold || moveY > moveThreshold) {\n        clearTimeout(pressTimer);\n        setPressTimer(null);\n      }\n    }\n  };\n  const handleTearTouchEnd = () => {\n    clearTimeout(pressTimer);\n    setPressTimer(null);\n    touchStartTime.current = null;\n    touchStartPosition.current = null;\n  };\n  const handleSegmentInteraction = (segment, isRightClick = false) => {\n    let newSelection;\n    const shouldRemove = isTouchDevice && !isAddMode || !isTouchDevice && isRightClick;\n    if (shouldRemove) {\n      newSelection = detachmentSegments.filter(s => s !== segment);\n    } else {\n      newSelection = detachmentSegments.includes(segment) ? detachmentSegments : [...detachmentSegments, segment];\n    }\n    setDetachmentSegments(newSelection);\n    onChange === null || onChange === void 0 ? void 0 : onChange({\n      tears: selectedHours,\n      detachment: Array.from(new Set(newSelection.map(segmentToHour)))\n    });\n  };\n  const handleStartDrawing = (segment, event) => {\n    event.preventDefault();\n    drawingRef.current = true;\n    setIsDrawing(true);\n    handleSegmentInteraction(segment, event.button === 2);\n  };\n  const handleDrawing = segment => {\n    if (drawingRef.current) {\n      handleSegmentInteraction(segment, drawingRef.current === 'right');\n    }\n  };\n  const handleMouseDown = (segment, event) => {\n    event.preventDefault();\n    drawingRef.current = event.button === 2 ? 'right' : 'left';\n    setIsDrawing(true);\n    handleSegmentInteraction(segment, event.button === 2);\n  };\n  const handleTearClick = (hour, event) => {\n    if (!isTouchDevice) {\n      event.stopPropagation();\n      const newSelection = selectedHours.includes(hour) ? selectedHours.filter(h => h !== hour) : [...selectedHours, hour];\n      setSelectedHours(newSelection);\n      onChange === null || onChange === void 0 ? void 0 : onChange({\n        tears: newSelection,\n        detachment: Array.from(new Set(detachmentSegments.map(segmentToHour)))\n      });\n    }\n  };\n  const handleTearTouchStart = (hour, event) => {\n    if (!isTouchDevice) return;\n    event.preventDefault();\n    if (isAddMode && selectedHours.includes(hour)) return;\n    if (!isAddMode && !selectedHours.includes(hour)) return;\n    touchStartTime.current = Date.now();\n    touchStartPosition.current = {\n      x: event.touches[0].clientX,\n      y: event.touches[0].clientY\n    };\n    const timer = setTimeout(() => {\n      const newSelection = isAddMode ? [...selectedHours, hour] : selectedHours.filter(h => h !== hour);\n      setSelectedHours(newSelection);\n      onChange === null || onChange === void 0 ? void 0 : onChange({\n        tears: newSelection,\n        detachment: Array.from(new Set(detachmentSegments.map(segmentToHour)))\n      });\n    }, longPressThreshold);\n    setPressTimer(timer);\n  };\n  const handleEndDrawing = () => {\n    drawingRef.current = false;\n    setIsDrawing(false);\n  };\n  const handleClearAll = () => {\n    setSelectedHours([]);\n    setDetachmentSegments([]);\n    onChange === null || onChange === void 0 ? void 0 : onChange({\n      tears: [],\n      detachment: []\n    });\n  };\n  useEffect(() => {\n    const preventDefault = e => {\n      if (drawingRef.current) {\n        e.preventDefault();\n      }\n    };\n    document.addEventListener('touchmove', preventDefault, {\n      passive: false\n    });\n    return () => {\n      document.removeEventListener('touchmove', preventDefault);\n    };\n  }, []);\n  useEffect(() => {\n    const cleanUp = () => {\n      handleEndDrawing();\n    };\n    window.addEventListener('mouseup', cleanUp);\n    window.addEventListener('touchend', cleanUp);\n    return () => {\n      window.removeEventListener('mouseup', cleanUp);\n      window.removeEventListener('touchend', cleanUp);\n    };\n  }, []);\n  return {\n    selectedHours,\n    detachmentSegments,\n    hoveredHour,\n    setHoveredHour,\n    isAddMode,\n    setIsAddMode,\n    isDrawing,\n    isTouchDevice,\n    handleTearTouchMove,\n    handleTearTouchEnd,\n    handleSegmentInteraction,\n    handleStartDrawing,\n    handleDrawing,\n    handleMouseDown,\n    handleTearClick,\n    handleTearTouchStart,\n    handleEndDrawing,\n    handleClearAll\n  };\n};\n_s(useClockInteractions, \"kPa0Ju77hYJERvwCo5h4zlEhwVY=\");","map":{"version":3,"names":["useState","useRef","useEffect","segmentToHour","useClockInteractions","onChange","_s","selectedHours","setSelectedHours","detachmentSegments","setDetachmentSegments","hoveredHour","setHoveredHour","isAddMode","setIsAddMode","isDrawing","setIsDrawing","isTouchDevice","setIsTouchDevice","pressTimer","setPressTimer","drawingRef","touchStartTime","touchStartPosition","longPressThreshold","moveThreshold","window","navigator","maxTouchPoints","handleTearTouchMove","event","current","moveX","Math","abs","touches","clientX","x","moveY","clientY","y","clearTimeout","handleTearTouchEnd","handleSegmentInteraction","segment","isRightClick","newSelection","shouldRemove","filter","s","includes","tears","detachment","Array","from","Set","map","handleStartDrawing","preventDefault","button","handleDrawing","handleMouseDown","handleTearClick","hour","stopPropagation","h","handleTearTouchStart","Date","now","timer","setTimeout","handleEndDrawing","handleClearAll","e","document","addEventListener","passive","removeEventListener","cleanUp"],"sources":["/Users/rose/Code/RD_risk/retinal-calculator/src/components/clock/hooks/useClockInteractions.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport { segmentToHour } from '../utils/clockCalculations';\n\nexport const useClockInteractions = (onChange) => {\n  const [selectedHours, setSelectedHours] = useState([]);\n  const [detachmentSegments, setDetachmentSegments] = useState([]);\n  const [hoveredHour, setHoveredHour] = useState(null);\n  const [isAddMode, setIsAddMode] = useState(true);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isTouchDevice, setIsTouchDevice] = useState(false);\n  const [pressTimer, setPressTimer] = useState(null);\n\n  const drawingRef = useRef(false);\n  const touchStartTime = useRef(null);\n  const touchStartPosition = useRef(null);\n  const longPressThreshold = 300;\n  const moveThreshold = 10;\n\n  useEffect(() => {\n    setIsTouchDevice('ontouchstart' in window || navigator.maxTouchPoints > 0);\n  }, []);\n\n  const handleTearTouchMove = (event) => {\n    if (touchStartPosition.current) {\n      const moveX = Math.abs(event.touches[0].clientX - touchStartPosition.current.x);\n      const moveY = Math.abs(event.touches[0].clientY - touchStartPosition.current.y);\n      \n      if (moveX > moveThreshold || moveY > moveThreshold) {\n        clearTimeout(pressTimer);\n        setPressTimer(null);\n      }\n    }\n  };\n\n  const handleTearTouchEnd = () => {\n    clearTimeout(pressTimer);\n    setPressTimer(null);\n    touchStartTime.current = null;\n    touchStartPosition.current = null;\n  };\n\n  const handleSegmentInteraction = (segment, isRightClick = false) => {\n    let newSelection;\n    \n    const shouldRemove = (isTouchDevice && !isAddMode) || (!isTouchDevice && isRightClick);\n    \n    if (shouldRemove) {\n      newSelection = detachmentSegments.filter(s => s !== segment);\n    } else {\n      newSelection = detachmentSegments.includes(segment) \n        ? detachmentSegments \n        : [...detachmentSegments, segment];\n    }\n    \n    setDetachmentSegments(newSelection);\n    onChange?.({ \n      tears: selectedHours, \n      detachment: Array.from(new Set(newSelection.map(segmentToHour))) \n    });\n  };\n\n  const handleStartDrawing = (segment, event) => {\n    event.preventDefault();\n    drawingRef.current = true;\n    setIsDrawing(true);\n    handleSegmentInteraction(segment, event.button === 2);\n  };\n\n  const handleDrawing = (segment) => {\n    if (drawingRef.current) {\n      handleSegmentInteraction(segment, drawingRef.current === 'right');\n    }\n  };\n\n  const handleMouseDown = (segment, event) => {\n    event.preventDefault();\n    drawingRef.current = event.button === 2 ? 'right' : 'left';\n    setIsDrawing(true);\n    handleSegmentInteraction(segment, event.button === 2);\n  };\n\n  const handleTearClick = (hour, event) => {\n    if (!isTouchDevice) {\n      event.stopPropagation();\n      const newSelection = selectedHours.includes(hour)\n        ? selectedHours.filter(h => h !== hour)\n        : [...selectedHours, hour];\n      setSelectedHours(newSelection);\n      onChange?.({ \n        tears: newSelection, \n        detachment: Array.from(new Set(detachmentSegments.map(segmentToHour))) \n      });\n    }\n  };\n\n  const handleTearTouchStart = (hour, event) => {\n    if (!isTouchDevice) return;\n    event.preventDefault();\n    \n    if (isAddMode && selectedHours.includes(hour)) return;\n    if (!isAddMode && !selectedHours.includes(hour)) return;\n\n    touchStartTime.current = Date.now();\n    touchStartPosition.current = {\n      x: event.touches[0].clientX,\n      y: event.touches[0].clientY\n    };\n\n    const timer = setTimeout(() => {\n      const newSelection = isAddMode\n        ? [...selectedHours, hour]\n        : selectedHours.filter(h => h !== hour);\n      setSelectedHours(newSelection);\n      onChange?.({ \n        tears: newSelection, \n        detachment: Array.from(new Set(detachmentSegments.map(segmentToHour))) \n      });\n    }, longPressThreshold);\n\n    setPressTimer(timer);\n  };\n\n  const handleEndDrawing = () => {\n    drawingRef.current = false;\n    setIsDrawing(false);\n  };\n\n  const handleClearAll = () => {\n    setSelectedHours([]);\n    setDetachmentSegments([]);\n    onChange?.({ tears: [], detachment: [] });\n  };\n\n  useEffect(() => {\n    const preventDefault = (e) => {\n      if (drawingRef.current) {\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('touchmove', preventDefault, { passive: false });\n    return () => {\n      document.removeEventListener('touchmove', preventDefault);\n    };\n  }, []);\n\n  useEffect(() => {\n    const cleanUp = () => {\n      handleEndDrawing();\n    };\n    \n    window.addEventListener('mouseup', cleanUp);\n    window.addEventListener('touchend', cleanUp);\n    \n    return () => {\n      window.removeEventListener('mouseup', cleanUp);\n      window.removeEventListener('touchend', cleanUp);\n    };\n  }, []);\n\n  return {\n    selectedHours,\n    detachmentSegments,\n    hoveredHour,\n    setHoveredHour,\n    isAddMode,\n    setIsAddMode,\n    isDrawing,\n    isTouchDevice,\n    handleTearTouchMove,\n    handleTearTouchEnd,\n    handleSegmentInteraction,\n    handleStartDrawing,\n    handleDrawing,\n    handleMouseDown,\n    handleTearClick,\n    handleTearTouchStart,\n    handleEndDrawing,\n    handleClearAll\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}