{"ast":null,"code":"/**\n * Converts a segment number (0-59) to its corresponding clock hour (1-12)\n * @param {number} segment - The segment number (0-59)\n * @returns {number} The clock hour (1-12)\n */\nexport const getClockHour = segment => {\n  // Special case handling for segments around hour 12\n  if (segment >= 57 || segment <= 2) return 12;\n\n  // Special case for hour 6\n  if (segment >= 28 && segment <= 32) return 6;\n\n  // Handle hour boundary cases\n  if (segment % 5 <= 2) {\n    return Math.floor(segment / 5);\n  }\n\n  // For all other segments, calculate the hour\n  const hourNumber = Math.floor(segment / 5) + 1;\n\n  // Ensure the hour is within valid bounds\n  return Math.min(Math.max(hourNumber, 1), 11);\n};\n\n// Run tests only if this file is executed directly\nif (import.meta.url === import.meta.resolve('./getClockHour.js')) {\n  const runClockHourTests = () => {\n    const testCases = [\n    // Special cases around hour 12\n    {\n      segment: 57,\n      expected: 12,\n      name: \"Hour 12 - start\"\n    }, {\n      segment: 59,\n      expected: 12,\n      name: \"Hour 12 - middle\"\n    }, {\n      segment: 0,\n      expected: 12,\n      name: \"Hour 12 - midnight\"\n    }, {\n      segment: 2,\n      expected: 12,\n      name: \"Hour 12 - end\"\n    },\n    // Special cases around hour 6\n    {\n      segment: 28,\n      expected: 6,\n      name: \"Hour 6 - start\"\n    }, {\n      segment: 30,\n      expected: 6,\n      name: \"Hour 6 - middle\"\n    }, {\n      segment: 32,\n      expected: 6,\n      name: \"Hour 6 - end\"\n    },\n    // Regular hours\n    {\n      segment: 5,\n      expected: 1,\n      name: \"Hour 1\"\n    }, {\n      segment: 10,\n      expected: 2,\n      name: \"Hour 2\"\n    }, {\n      segment: 15,\n      expected: 3,\n      name: \"Hour 3\"\n    }, {\n      segment: 20,\n      expected: 4,\n      name: \"Hour 4\"\n    }, {\n      segment: 25,\n      expected: 5,\n      name: \"Hour 5\"\n    }, {\n      segment: 35,\n      expected: 7,\n      name: \"Hour 7\"\n    }, {\n      segment: 40,\n      expected: 8,\n      name: \"Hour 8\"\n    }, {\n      segment: 45,\n      expected: 9,\n      name: \"Hour 9\"\n    }, {\n      segment: 50,\n      expected: 10,\n      name: \"Hour 10\"\n    }, {\n      segment: 55,\n      expected: 11,\n      name: \"Hour 11\"\n    },\n    // Boundary cases\n    {\n      segment: 3,\n      expected: 1,\n      name: \"Boundary - after 12\"\n    }, {\n      segment: 56,\n      expected: 11,\n      name: \"Boundary - before 12\"\n    }];\n\n    // Run tests and collect results\n    const results = testCases.map(testCase => {\n      const result = getClockHour(testCase.segment);\n      const passed = result === testCase.expected;\n      return {\n        name: testCase.name,\n        segment: testCase.segment,\n        expected: testCase.expected,\n        actual: result,\n        passed: passed\n      };\n    });\n\n    // Print results\n    results.forEach(result => {\n      console.log(`\\nTest: ${result.name}`);\n      console.log(`Segment: ${result.segment}`);\n      console.log(`Expected: ${result.expected}`);\n      console.log(`Actual: ${result.actual}`);\n      console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n    });\n\n    // Return overall test status\n    return results.every(r => r.passed);\n  };\n\n  // Run the tests\n  const testsPassed = runClockHourTests();\n  console.log(`\\nAll tests ${testsPassed ? 'PASSED' : 'FAILED'}`);\n}","map":{"version":3,"names":["getClockHour","segment","Math","floor","hourNumber","min","max","import","meta","url","resolve","runClockHourTests","testCases","expected","name","results","map","testCase","result","passed","actual","forEach","console","log","every","r","testsPassed"],"sources":["/Users/rose/Code/RCRD/src/components/clock/utils/getClockHour.js"],"sourcesContent":["/**\n * Converts a segment number (0-59) to its corresponding clock hour (1-12)\n * @param {number} segment - The segment number (0-59)\n * @returns {number} The clock hour (1-12)\n */\nexport const getClockHour = (segment) => {\n    // Special case handling for segments around hour 12\n    if (segment >= 57 || segment <= 2) return 12;\n    \n    // Special case for hour 6\n    if (segment >= 28 && segment <= 32) return 6;\n    \n    // Handle hour boundary cases\n    if (segment % 5 <= 2) {\n        return Math.floor(segment / 5);\n    }\n    \n    // For all other segments, calculate the hour\n    const hourNumber = Math.floor(segment / 5) + 1;\n    \n    // Ensure the hour is within valid bounds\n    return Math.min(Math.max(hourNumber, 1), 11);\n};\n\n// Run tests only if this file is executed directly\nif (import.meta.url === import.meta.resolve('./getClockHour.js')) {\n    const runClockHourTests = () => {\n        const testCases = [\n            // Special cases around hour 12\n            { segment: 57, expected: 12, name: \"Hour 12 - start\" },\n            { segment: 59, expected: 12, name: \"Hour 12 - middle\" },\n            { segment: 0, expected: 12, name: \"Hour 12 - midnight\" },\n            { segment: 2, expected: 12, name: \"Hour 12 - end\" },\n            \n            // Special cases around hour 6\n            { segment: 28, expected: 6, name: \"Hour 6 - start\" },\n            { segment: 30, expected: 6, name: \"Hour 6 - middle\" },\n            { segment: 32, expected: 6, name: \"Hour 6 - end\" },\n            \n            // Regular hours\n            { segment: 5, expected: 1, name: \"Hour 1\" },\n            { segment: 10, expected: 2, name: \"Hour 2\" },\n            { segment: 15, expected: 3, name: \"Hour 3\" },\n            { segment: 20, expected: 4, name: \"Hour 4\" },\n            { segment: 25, expected: 5, name: \"Hour 5\" },\n            { segment: 35, expected: 7, name: \"Hour 7\" },\n            { segment: 40, expected: 8, name: \"Hour 8\" },\n            { segment: 45, expected: 9, name: \"Hour 9\" },\n            { segment: 50, expected: 10, name: \"Hour 10\" },\n            { segment: 55, expected: 11, name: \"Hour 11\" },\n            \n            // Boundary cases\n            { segment: 3, expected: 1, name: \"Boundary - after 12\" },\n            { segment: 56, expected: 11, name: \"Boundary - before 12\" }\n        ];\n\n        // Run tests and collect results\n        const results = testCases.map(testCase => {\n            const result = getClockHour(testCase.segment);\n            const passed = result === testCase.expected;\n\n            return {\n                name: testCase.name,\n                segment: testCase.segment,\n                expected: testCase.expected,\n                actual: result,\n                passed: passed\n            };\n        });\n\n        // Print results\n        results.forEach(result => {\n            console.log(`\\nTest: ${result.name}`);\n            console.log(`Segment: ${result.segment}`);\n            console.log(`Expected: ${result.expected}`);\n            console.log(`Actual: ${result.actual}`);\n            console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n        });\n\n        // Return overall test status\n        return results.every(r => r.passed);\n    };\n\n    // Run the tests\n    const testsPassed = runClockHourTests();\n    console.log(`\\nAll tests ${testsPassed ? 'PASSED' : 'FAILED'}`);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}