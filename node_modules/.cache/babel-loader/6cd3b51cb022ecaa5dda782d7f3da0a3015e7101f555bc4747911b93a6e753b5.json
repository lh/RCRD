{"ast":null,"code":"// Import required functions (shown here for clarity)\n// In actual implementation, these would be imported from their respective files\nconst {\n  getSegmentRanges\n} = require('./getSegmentRanges');\nconst {\n  getClockHour\n} = require('./getClockHour');\nexport const formatDetachmentHours = segments => {\n  // Handle empty input\n  if (!segments || segments.length === 0) {\n    return \"None\";\n  }\n\n  // Handle total detachment case\n  if (segments.length >= 55) {\n    return \"1-12 o'clock (Total)\";\n  }\n\n  // Get continuous ranges of segments\n  const ranges = getSegmentRanges(segments);\n\n  // Convert each range to clock hours\n  const hourRanges = ranges.map(range => {\n    const startHour = getClockHour(range.start);\n    const endSegment = (range.start + range.length - 1) % 60;\n    const endHour = getClockHour(endSegment);\n    return {\n      startHour,\n      endHour\n    };\n  });\n\n  // Format the ranges into a string\n  const formattedRanges = hourRanges.map(range => {\n    if (range.startHour === range.endHour) {\n      return `${range.startHour}`;\n    }\n    return `${range.startHour}-${range.endHour}`;\n  });\n  return formattedRanges.join('; ') + \" o'clock\";\n};\n\n// Run tests only if this file is executed directly\nif (require.main === module) {\n  function runFormatDetachmentTests() {\n    const testCases = [{\n      name: \"Empty input\",\n      input: [],\n      expected: \"None\"\n    }, {\n      name: \"Total detachment\",\n      input: Array.from({\n        length: 56\n      }, (_, i) => i),\n      expected: \"1-12 o'clock (Total)\"\n    }, {\n      name: \"Single hour at 12\",\n      input: [0, 1],\n      expected: \"12 o'clock\"\n    }, {\n      name: \"Simple range within hour\",\n      input: [5, 6, 7],\n      expected: \"1 o'clock\"\n    }, {\n      name: \"Range crossing midnight\",\n      input: [58, 59, 0, 1],\n      expected: \"12 o'clock\"\n    }, {\n      name: \"Big Range crossing midnight\",\n      input: [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0, 1, 2, 3, 4, 5, 6],\n      expected: \"10-1 o'clock\"\n    }, {\n      name: \"Multiple separate ranges\",\n      input: [0, 1, 2, 25, 26, 27, 28],\n      expected: \"12; 5-6 o'clock\"\n    }, {\n      name: \"Hour 6 special case\",\n      input: [24, 25, 26, 27, 28],\n      expected: \"5-6 o'clock\"\n    }, {\n      name: \"Single segment at boundary\",\n      input: [5],\n      expected: \"1 o'clock\"\n    }, {\n      name: \"Single segment at 12\",\n      input: [59],\n      expected: \"12 o'clock\"\n    }];\n    return testCases.map(testCase => {\n      const result = formatDetachmentHours(testCase.input);\n      const passed = result === testCase.expected;\n      return {\n        name: testCase.name,\n        input: testCase.input,\n        expected: testCase.expected,\n        actual: result,\n        passed: passed,\n        detail: passed ? '' : `Got \"${result}\", expected \"${testCase.expected}\"`\n      };\n    });\n  }\n\n  // Run tests\n  const results = runFormatDetachmentTests();\n  console.log(\"\\nFormat Detachment Hours Tests:\");\n  results.forEach(result => {\n    console.log(`\\nTest: ${result.name}`);\n    console.log(`Input: [${result.input.join(', ')}]`);\n    console.log(`Expected: \"${result.expected}\"`);\n    console.log(`Actual: \"${result.actual}\"`);\n    console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n    if (!result.passed) {\n      console.log(`Detail: ${result.detail}`);\n    }\n  });\n}","map":{"version":3,"names":["getSegmentRanges","require","getClockHour","formatDetachmentHours","segments","length","ranges","hourRanges","map","range","startHour","start","endSegment","endHour","formattedRanges","join","main","module","runFormatDetachmentTests","testCases","name","input","expected","Array","from","_","i","testCase","result","passed","actual","detail","results","console","log","forEach"],"sources":["/Users/rose/Code/RCRD/src/components/clock/utils/formatDetachmentHours.js"],"sourcesContent":["// Import required functions (shown here for clarity)\n// In actual implementation, these would be imported from their respective files\nconst { getSegmentRanges } = require('./getSegmentRanges');\nconst { getClockHour } = require('./getClockHour');\n\nexport const formatDetachmentHours = (segments) => {\n    // Handle empty input\n    if (!segments || segments.length === 0) {\n        return \"None\";\n    }\n\n    // Handle total detachment case\n    if (segments.length >= 55) {\n        return \"1-12 o'clock (Total)\";\n    }\n\n    // Get continuous ranges of segments\n    const ranges = getSegmentRanges(segments);\n\n    // Convert each range to clock hours\n    const hourRanges = ranges.map(range => {\n        const startHour = getClockHour(range.start);\n        const endSegment = (range.start + range.length - 1) % 60;\n        const endHour = getClockHour(endSegment);\n        return { startHour, endHour };\n    });\n\n    // Format the ranges into a string\n    const formattedRanges = hourRanges.map(range => {\n        if (range.startHour === range.endHour) {\n            return `${range.startHour}`;\n        }\n        return `${range.startHour}-${range.endHour}`;\n    });\n\n    return formattedRanges.join('; ') + \" o'clock\";\n}\n\n\n\n// Run tests only if this file is executed directly\nif (require.main === module) {\n    function runFormatDetachmentTests() {\n        const testCases = [\n            {\n                name: \"Empty input\",\n                input: [],\n                expected: \"None\"\n            },\n            {\n                name: \"Total detachment\",\n                input: Array.from({ length: 56 }, (_, i) => i),\n                expected: \"1-12 o'clock (Total)\"\n            },\n            {\n                name: \"Single hour at 12\",\n                input: [0, 1],\n                expected: \"12 o'clock\"\n            },\n            {\n                name: \"Simple range within hour\",\n                input: [5, 6, 7],\n                expected: \"1 o'clock\"\n            },\n            {\n                name: \"Range crossing midnight\",\n                input: [58, 59, 0, 1],\n                expected: \"12 o'clock\"\n            },\n            {\n                name: \"Big Range crossing midnight\",\n                input: [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0, 1, 2, 3, 4, 5, 6],\n                expected: \"10-1 o'clock\"\n            },\n            {\n                name: \"Multiple separate ranges\",\n                input: [0, 1, 2, 25, 26, 27, 28],\n                expected: \"12; 5-6 o'clock\"\n            },\n            {\n                name: \"Hour 6 special case\",\n                input: [24, 25, 26, 27, 28],\n                expected: \"5-6 o'clock\"\n            },\n            {\n                name: \"Single segment at boundary\",\n                input: [5],\n                expected: \"1 o'clock\"\n            },\n            {\n                name: \"Single segment at 12\",\n                input: [59],\n                expected: \"12 o'clock\"\n            }\n        ];\n\n        return testCases.map(testCase => {\n            const result = formatDetachmentHours(testCase.input);\n            const passed = result === testCase.expected;\n\n            return {\n                name: testCase.name,\n                input: testCase.input,\n                expected: testCase.expected,\n                actual: result,\n                passed: passed,\n                detail: passed ? '' : `Got \"${result}\", expected \"${testCase.expected}\"`\n            };\n        });\n    }\n\n    // Run tests\n    const results = runFormatDetachmentTests();\n    console.log(\"\\nFormat Detachment Hours Tests:\");\n    results.forEach(result => {\n        console.log(`\\nTest: ${result.name}`);\n        console.log(`Input: [${result.input.join(', ')}]`);\n        console.log(`Expected: \"${result.expected}\"`);\n        console.log(`Actual: \"${result.actual}\"`);\n        console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n        if (!result.passed) {\n            console.log(`Detail: ${result.detail}`);\n        }\n    });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}