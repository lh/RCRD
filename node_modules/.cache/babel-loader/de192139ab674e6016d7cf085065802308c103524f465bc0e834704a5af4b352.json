{"ast":null,"code":"import { getSegmentRanges } from './getSegmentRanges.js';\nimport { getClockHour } from './getClockHour.js';\n\n/**\n * Formats an array of segment numbers into a human-readable clock hour range string\n * @param {number[]} segments - Array of segment numbers (0-59)\n * @returns {string} Formatted clock hour range (e.g., \"1-3 o'clock\" or \"12; 5-6 o'clock\")\n */\nexport const formatDetachmentHours = segments => {\n  // Handle empty input\n  if (!segments || segments.length === 0) {\n    return \"None\";\n  }\n\n  // Handle total detachment case\n  if (segments.length >= 55) {\n    return \"1-12 o'clock (Total)\";\n  }\n\n  // Get continuous ranges of segments\n  const ranges = getSegmentRanges(segments);\n\n  // Convert each range to clock hours\n  const hourRanges = ranges.map(range => {\n    const startHour = getClockHour(range.start);\n    const endSegment = (range.start + range.length - 1) % 60;\n    const endHour = getClockHour(endSegment);\n    return {\n      startHour,\n      endHour\n    };\n  });\n\n  // Format the ranges into a string\n  const formattedRanges = hourRanges.map(range => {\n    if (range.startHour === range.endHour) {\n      return `${range.startHour}`;\n    }\n    return `${range.startHour}-${range.endHour}`;\n  });\n  return formattedRanges.join('; ') + \" o'clock\";\n};\n\n// // Run tests only if this file is executed directly\n// if (import.meta.url === import.meta.resolve('./formatDetachmentHours.js')) {\n//     const runFormatDetachmentTests = () => {\n//         const testCases = [\n//             {\n//                 name: \"Empty input\",\n//                 input: [],\n//                 expected: \"None\"\n//             },\n//             {\n//                 name: \"Total detachment\",\n//                 input: Array.from({ length: 56 }, (_, i) => i),\n//                 expected: \"1-12 o'clock (Total)\"\n//             },\n//             {\n//                 name: \"Single hour at 12\",\n//                 input: [0, 1],\n//                 expected: \"12 o'clock\"\n//             },\n//             {\n//                 name: \"Simple range within hour\",\n//                 input: [5, 6, 7],\n//                 expected: \"1 o'clock\"\n//             },\n//             {\n//                 name: \"Range crossing midnight\",\n//                 input: [58, 59, 0, 1],\n//                 expected: \"12 o'clock\"\n//             },\n//             {\n//                 name: \"Big Range crossing midnight\",\n//                 input: [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0, 1, 2, 3, 4, 5, 6],\n//                 expected: \"10-1 o'clock\"\n//             },\n//             {\n//                 name: \"Multiple separate ranges\",\n//                 input: [0, 1, 2, 25, 26, 27, 28],\n//                 expected: \"12; 5-6 o'clock\"\n//             },\n//             {\n//                 name: \"Hour 6 special case\",\n//                 input: [24, 25, 26, 27, 28],\n//                 expected: \"5-6 o'clock\"\n//             },\n//             {\n//                 name: \"Single segment at boundary\",\n//                 input: [5],\n//                 expected: \"1 o'clock\"\n//             },\n//             {\n//                 name: \"Single segment at 12\",\n//                 input: [59],\n//                 expected: \"12 o'clock\"\n//             }\n//         ];\n\n//         // Run tests and collect results\n//         const results = testCases.map(testCase => {\n//             const result = formatDetachmentHours(testCase.input);\n//             const passed = result === testCase.expected;\n\n//             return {\n//                 name: testCase.name,\n//                 input: testCase.input,\n//                 expected: testCase.expected,\n//                 actual: result,\n//                 passed: passed,\n//                 detail: passed ? '' : `Got \"${result}\", expected \"${testCase.expected}\"`\n//             };\n//         });\n\n//         // Print results\n//         results.forEach(result => {\n//             console.log(`\\nTest: ${result.name}`);\n//             console.log(`Input: [${result.input.join(', ')}]`);\n//             console.log(`Expected: \"${result.expected}\"`);\n//             console.log(`Actual: \"${result.actual}\"`);\n//             console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n//             if (!result.passed) {\n//                 console.log(`Detail: ${result.detail}`);\n//             }\n//         });\n\n//         // Return overall test status\n//         return results.every(r => r.passed);\n//     };\n\n//     // Run the tests\n//     const testsPassed = runFormatDetachmentTests();\n//     console.log(`\\nAll tests ${testsPassed ? 'PASSED' : 'FAILED'}`);\n// }","map":{"version":3,"names":["getSegmentRanges","getClockHour","formatDetachmentHours","segments","length","ranges","hourRanges","map","range","startHour","start","endSegment","endHour","formattedRanges","join"],"sources":["/Users/rose/Code/RCRD/src/components/clock/utils/formatDetachmentHours.js"],"sourcesContent":["import { getSegmentRanges } from './getSegmentRanges.js';\nimport { getClockHour } from './getClockHour.js';\n\n/**\n * Formats an array of segment numbers into a human-readable clock hour range string\n * @param {number[]} segments - Array of segment numbers (0-59)\n * @returns {string} Formatted clock hour range (e.g., \"1-3 o'clock\" or \"12; 5-6 o'clock\")\n */\nexport const formatDetachmentHours = (segments) => {\n    // Handle empty input\n    if (!segments || segments.length === 0) {\n        return \"None\";\n    }\n\n    // Handle total detachment case\n    if (segments.length >= 55) {\n        return \"1-12 o'clock (Total)\";\n    }\n\n    // Get continuous ranges of segments\n    const ranges = getSegmentRanges(segments);\n\n    // Convert each range to clock hours\n    const hourRanges = ranges.map(range => {\n        const startHour = getClockHour(range.start);\n        const endSegment = (range.start + range.length - 1) % 60;\n        const endHour = getClockHour(endSegment);\n        return { startHour, endHour };\n    });\n\n    // Format the ranges into a string\n    const formattedRanges = hourRanges.map(range => {\n        if (range.startHour === range.endHour) {\n            return `${range.startHour}`;\n        }\n        return `${range.startHour}-${range.endHour}`;\n    });\n\n    return formattedRanges.join('; ') + \" o'clock\";\n};\n\n// // Run tests only if this file is executed directly\n// if (import.meta.url === import.meta.resolve('./formatDetachmentHours.js')) {\n//     const runFormatDetachmentTests = () => {\n//         const testCases = [\n//             {\n//                 name: \"Empty input\",\n//                 input: [],\n//                 expected: \"None\"\n//             },\n//             {\n//                 name: \"Total detachment\",\n//                 input: Array.from({ length: 56 }, (_, i) => i),\n//                 expected: \"1-12 o'clock (Total)\"\n//             },\n//             {\n//                 name: \"Single hour at 12\",\n//                 input: [0, 1],\n//                 expected: \"12 o'clock\"\n//             },\n//             {\n//                 name: \"Simple range within hour\",\n//                 input: [5, 6, 7],\n//                 expected: \"1 o'clock\"\n//             },\n//             {\n//                 name: \"Range crossing midnight\",\n//                 input: [58, 59, 0, 1],\n//                 expected: \"12 o'clock\"\n//             },\n//             {\n//                 name: \"Big Range crossing midnight\",\n//                 input: [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0, 1, 2, 3, 4, 5, 6],\n//                 expected: \"10-1 o'clock\"\n//             },\n//             {\n//                 name: \"Multiple separate ranges\",\n//                 input: [0, 1, 2, 25, 26, 27, 28],\n//                 expected: \"12; 5-6 o'clock\"\n//             },\n//             {\n//                 name: \"Hour 6 special case\",\n//                 input: [24, 25, 26, 27, 28],\n//                 expected: \"5-6 o'clock\"\n//             },\n//             {\n//                 name: \"Single segment at boundary\",\n//                 input: [5],\n//                 expected: \"1 o'clock\"\n//             },\n//             {\n//                 name: \"Single segment at 12\",\n//                 input: [59],\n//                 expected: \"12 o'clock\"\n//             }\n//         ];\n\n//         // Run tests and collect results\n//         const results = testCases.map(testCase => {\n//             const result = formatDetachmentHours(testCase.input);\n//             const passed = result === testCase.expected;\n\n//             return {\n//                 name: testCase.name,\n//                 input: testCase.input,\n//                 expected: testCase.expected,\n//                 actual: result,\n//                 passed: passed,\n//                 detail: passed ? '' : `Got \"${result}\", expected \"${testCase.expected}\"`\n//             };\n//         });\n\n//         // Print results\n//         results.forEach(result => {\n//             console.log(`\\nTest: ${result.name}`);\n//             console.log(`Input: [${result.input.join(', ')}]`);\n//             console.log(`Expected: \"${result.expected}\"`);\n//             console.log(`Actual: \"${result.actual}\"`);\n//             console.log(`Result: ${result.passed ? 'PASS' : 'FAIL'}`);\n//             if (!result.passed) {\n//                 console.log(`Detail: ${result.detail}`);\n//             }\n//         });\n\n//         // Return overall test status\n//         return results.every(r => r.passed);\n//     };\n\n//     // Run the tests\n//     const testsPassed = runFormatDetachmentTests();\n//     console.log(`\\nAll tests ${testsPassed ? 'PASSED' : 'FAILED'}`);\n// }"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,YAAY,QAAQ,mBAAmB;;AAEhD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAIC,QAAQ,IAAK;EAC/C;EACA,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IACpC,OAAO,MAAM;EACjB;;EAEA;EACA,IAAID,QAAQ,CAACC,MAAM,IAAI,EAAE,EAAE;IACvB,OAAO,sBAAsB;EACjC;;EAEA;EACA,MAAMC,MAAM,GAAGL,gBAAgB,CAACG,QAAQ,CAAC;;EAEzC;EACA,MAAMG,UAAU,GAAGD,MAAM,CAACE,GAAG,CAACC,KAAK,IAAI;IACnC,MAAMC,SAAS,GAAGR,YAAY,CAACO,KAAK,CAACE,KAAK,CAAC;IAC3C,MAAMC,UAAU,GAAG,CAACH,KAAK,CAACE,KAAK,GAAGF,KAAK,CAACJ,MAAM,GAAG,CAAC,IAAI,EAAE;IACxD,MAAMQ,OAAO,GAAGX,YAAY,CAACU,UAAU,CAAC;IACxC,OAAO;MAAEF,SAAS;MAAEG;IAAQ,CAAC;EACjC,CAAC,CAAC;;EAEF;EACA,MAAMC,eAAe,GAAGP,UAAU,CAACC,GAAG,CAACC,KAAK,IAAI;IAC5C,IAAIA,KAAK,CAACC,SAAS,KAAKD,KAAK,CAACI,OAAO,EAAE;MACnC,OAAO,GAAGJ,KAAK,CAACC,SAAS,EAAE;IAC/B;IACA,OAAO,GAAGD,KAAK,CAACC,SAAS,IAAID,KAAK,CAACI,OAAO,EAAE;EAChD,CAAC,CAAC;EAEF,OAAOC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}