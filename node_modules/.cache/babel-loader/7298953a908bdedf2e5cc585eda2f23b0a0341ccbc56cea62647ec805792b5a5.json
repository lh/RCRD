{"ast":null,"code":"var _jsxFileName = \"/Users/rose/Code/RCRD/src/components/clock/ClockFace.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Segment from './Segment';\n// Add useMediaQuery hook directly in this file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useMediaQuery = query => {\n  _s();\n  const [matches, setMatches] = useState(false);\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    setMatches(media.matches);\n    const listener = e => setMatches(e.matches);\n    media.addEventListener('change', listener);\n    return () => media.removeEventListener('change', listener);\n  }, [query]);\n  return matches;\n};\n_s(useMediaQuery, \"/aV7jSECvYA0Ea4uAEPK2AzROhs=\");\nconst ClockFace = ({\n  selectedSegments,\n  onSegmentClick\n}) => {\n  _s2();\n  const isMobile = useMediaQuery('(max-width: 768px)');\n  const segmentCount = isMobile ? 24 : 60;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative w-full h-full\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative w-full h-full\",\n        children: Array.from({\n          length: segmentCount\n        }, (_, index) => {\n          const angle = index * (360 / segmentCount);\n          const logicIndex = isMobile ? index * (60 / 24) : index;\n          return /*#__PURE__*/_jsxDEV(Segment, {\n            angle: angle,\n            isSelected: selectedSegments.includes(Math.floor(logicIndex)),\n            onClick: () => onSegmentClick(Math.floor(logicIndex))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s2(ClockFace, \"7khsyUHgctuHIPa2/KlDS6LcnT0=\", false, function () {\n  return [useMediaQuery];\n});\n_c = ClockFace;\nexport default ClockFace;\nvar _c;\n$RefreshReg$(_c, \"ClockFace\");","map":{"version":3,"names":["useEffect","useState","Segment","jsxDEV","_jsxDEV","useMediaQuery","query","_s","matches","setMatches","media","window","matchMedia","listener","e","addEventListener","removeEventListener","ClockFace","selectedSegments","onSegmentClick","_s2","isMobile","segmentCount","className","children","Array","from","length","_","index","angle","logicIndex","isSelected","includes","Math","floor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rose/Code/RCRD/src/components/clock/ClockFace.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport Segment from './Segment';\n// Add useMediaQuery hook directly in this file\nconst useMediaQuery = (query) => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    setMatches(media.matches);\n\n    const listener = (e) => setMatches(e.matches);\n    media.addEventListener('change', listener);\n    return () => media.removeEventListener('change', listener);\n  }, [query]);\n\n  return matches;\n};\nconst ClockFace = ({ selectedSegments, onSegmentClick }) => {\n  const isMobile = useMediaQuery('(max-width: 768px)');\n  const segmentCount = isMobile ? 24 : 60;\n\n  return (\n    <div className=\"relative w-full h-full\">\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <div className=\"relative w-full h-full\">\n          {Array.from({ length: segmentCount }, (_, index) => {\n            const angle = (index * (360 / segmentCount));\n            const logicIndex = isMobile ? index * (60/24) : index;\n\n            return (\n              <Segment\n                key={index}\n                angle={angle}\n                isSelected={selectedSegments.includes(Math.floor(logicIndex))}\n                onClick={() => onSegmentClick(Math.floor(logicIndex))}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ClockFace;"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAC/B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGC,MAAM,CAACC,UAAU,CAACN,KAAK,CAAC;IACtCG,UAAU,CAACC,KAAK,CAACF,OAAO,CAAC;IAEzB,MAAMK,QAAQ,GAAIC,CAAC,IAAKL,UAAU,CAACK,CAAC,CAACN,OAAO,CAAC;IAC7CE,KAAK,CAACK,gBAAgB,CAAC,QAAQ,EAAEF,QAAQ,CAAC;IAC1C,OAAO,MAAMH,KAAK,CAACM,mBAAmB,CAAC,QAAQ,EAAEH,QAAQ,CAAC;EAC5D,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;EAEX,OAAOE,OAAO;AAChB,CAAC;AAACD,EAAA,CAbIF,aAAa;AAcnB,MAAMY,SAAS,GAAGA,CAAC;EAAEC,gBAAgB;EAAEC;AAAe,CAAC,KAAK;EAAAC,GAAA;EAC1D,MAAMC,QAAQ,GAAGhB,aAAa,CAAC,oBAAoB,CAAC;EACpD,MAAMiB,YAAY,GAAGD,QAAQ,GAAG,EAAE,GAAG,EAAE;EAEvC,oBACEjB,OAAA;IAAKmB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,eACrCpB,OAAA;MAAKmB,SAAS,EAAC,mDAAmD;MAAAC,QAAA,eAChEpB,OAAA;QAAKmB,SAAS,EAAC,wBAAwB;QAAAC,QAAA,EACpCC,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAEL;QAAa,CAAC,EAAE,CAACM,CAAC,EAAEC,KAAK,KAAK;UAClD,MAAMC,KAAK,GAAID,KAAK,IAAI,GAAG,GAAGP,YAAY,CAAE;UAC5C,MAAMS,UAAU,GAAGV,QAAQ,GAAGQ,KAAK,IAAI,EAAE,GAAC,EAAE,CAAC,GAAGA,KAAK;UAErD,oBACEzB,OAAA,CAACF,OAAO;YAEN4B,KAAK,EAAEA,KAAM;YACbE,UAAU,EAAEd,gBAAgB,CAACe,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAE;YAC9DK,OAAO,EAAEA,CAAA,KAAMjB,cAAc,CAACe,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC;UAAE,GAHjDF,KAAK;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIX,CAAC;QAEN,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpB,GAAA,CAzBIH,SAAS;EAAA,QACIZ,aAAa;AAAA;AAAAoC,EAAA,GAD1BxB,SAAS;AA2Bf,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}